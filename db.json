{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/polarbear/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/polarbear/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/polarbear/source/js/src/theme.js","path":"js/src/theme.js","modified":0,"renderable":1},{"_id":"themes/polarbear/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_overlay.png","path":"lib/fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading.gif","path":"lib/fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/blank.gif","path":"lib/fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite@2x.png","path":"lib/fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite.png","path":"lib/fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading@2x.gif","path":"lib/fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.js","path":"lib/fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.pack.js","path":"lib/fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.css","path":"lib/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/jquery/jquery-3.1.1.min.js","path":"lib/jquery/jquery-3.1.1.min.js","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/fancybox_buttons.png","path":"lib/fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-media.js","path":"lib/fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1}],"Cache":[{"_id":"themes/polarbear/.DS_Store","hash":"23eb333b8d2e17685c0bcec5f5dfa3c8a051d13f","modified":1490097845000},{"_id":"themes/polarbear/README.md","hash":"f63d09789eb79bf4ab255b050051ea9ee14d4f33","modified":1490096797000},{"_id":"themes/polarbear/LICENSE","hash":"6fd796a4c624297885ceed920ac7130a96f29a85","modified":1490096797000},{"_id":"themes/polarbear/.eslintrc","hash":"38131da004ee91a91f25644508b377b261f59687","modified":1490096797000},{"_id":"themes/polarbear/_config.yml","hash":"bbe2ea7b2abccc98a54a77a348128bbac22fa897","modified":1490097442000},{"_id":"themes/polarbear/package.json","hash":"6291ee37b082aabb68b14c0ede7971306c613b86","modified":1490096797000},{"_id":"themes/polarbear/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1490096797000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1490096680000},{"_id":"themes/polarbear/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1490096793000},{"_id":"themes/polarbear/.git/config","hash":"497c37732e950146f4540cf1e5d70e1d203bb69b","modified":1490096797000},{"_id":"themes/polarbear/.git/index","hash":"61b8207a8cb9c989dff76fc579a433dd7e4d117c","modified":1490096797000},{"_id":"themes/polarbear/.git/packed-refs","hash":"7b5f932aa9b5a504b9cdeebf49b5f557b83de5e7","modified":1490096797000},{"_id":"themes/polarbear/languages/zh-cn.yml","hash":"be347d8f215c1d36a7a906143b1411e5aaf5d500","modified":1490096797000},{"_id":"themes/polarbear/languages/default.yml","hash":"5687525dd72a436ce0970f0b844dc7251069400a","modified":1490096797000},{"_id":"themes/polarbear/languages/en.yml","hash":"5687525dd72a436ce0970f0b844dc7251069400a","modified":1490096797000},{"_id":"themes/polarbear/layout/_layout.swig","hash":"60ad6ead7c72b9d94a4adf073884edc23f0751ea","modified":1490096797000},{"_id":"themes/polarbear/layout/archive.swig","hash":"600c71de731ac0ac8c281c3c9df1d7e9b62d2a9d","modified":1490096797000},{"_id":"themes/polarbear/layout/categories.swig","hash":"dc244e0ee1fc34f43d5b195b9c1f6ef6d3ad2d0d","modified":1490096797000},{"_id":"themes/polarbear/layout/page.swig","hash":"a168c6e1dcf21af6408a713f8512b77de0dc60f3","modified":1490096797000},{"_id":"themes/polarbear/layout/index.swig","hash":"5c1dce2ea06d8de6f05f92f95cb1449cefc846bc","modified":1490096797000},{"_id":"themes/polarbear/layout/post.swig","hash":"f7a8b96953374694c50d131b1b760fd84b2d2d51","modified":1490096797000},{"_id":"themes/polarbear/source/favicon.ico","hash":"7d7c441f635c35b73f060f698773b14b7f306f4c","modified":1490096797000},{"_id":"themes/polarbear/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1490096793000},{"_id":"themes/polarbear/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1490096793000},{"_id":"themes/polarbear/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1490096793000},{"_id":"themes/polarbear/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1490096793000},{"_id":"themes/polarbear/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1490096793000},{"_id":"themes/polarbear/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1490096793000},{"_id":"themes/polarbear/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1490096793000},{"_id":"themes/polarbear/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1490096793000},{"_id":"themes/polarbear/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1490096793000},{"_id":"themes/polarbear/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1490096793000},{"_id":"themes/polarbear/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1490096793000},{"_id":"themes/polarbear/.git/logs/HEAD","hash":"7ebc2ede8c9068f0960d2a3eea7ae80ea3b47fec","modified":1490096797000},{"_id":"themes/polarbear/layout/_macro/archive.swig","hash":"1b9a0263c877ce801c0dc0ba256c799d54638825","modified":1490096797000},{"_id":"themes/polarbear/layout/_partial/comments.swig","hash":"9ba815734a4d807859f0aeafd5536b2d35d26074","modified":1490096797000},{"_id":"themes/polarbear/layout/_macro/post.swig","hash":"26367661ff9535359d420943d5b29bd5b8c5911f","modified":1490096797000},{"_id":"themes/polarbear/layout/_partial/footer.swig","hash":"4b88f30ad6218c87d27bc5c5b37bbbd97732cf59","modified":1490096797000},{"_id":"themes/polarbear/layout/_partial/header.swig","hash":"2e7d1faf49dadbf87b5925ff8da643cb470d6199","modified":1490096797000},{"_id":"themes/polarbear/layout/_partial/pagination.swig","hash":"3843e523b9a7a1c5973d0c2de05cc88467733e09","modified":1490096797000},{"_id":"themes/polarbear/layout/_partial/widget.swig","hash":"d8181794388ef3baa26c2d5cf8d71ae05472b32e","modified":1490096797000},{"_id":"themes/polarbear/layout/_partial/head.swig","hash":"44c45d90d9a3db3401f6aa219cd26f38cdd0960b","modified":1490096797000},{"_id":"themes/polarbear/layout/_script/analytics.swig","hash":"24ba4a8adcaf09c9ede76405ee732385595d8e39","modified":1490096797000},{"_id":"themes/polarbear/layout/_script/comments.swig","hash":"256713e117d67e2caad21db52bc0d51460e4ff7e","modified":1490096797000},{"_id":"themes/polarbear/layout/_script/libs.swig","hash":"615f82ddd2f89e87a604b51773fd719c78f90580","modified":1490096797000},{"_id":"themes/polarbear/layout/_script/config.swig","hash":"4532063827e51b5c0dc3f58ca8c37896959887ac","modified":1490096797000},{"_id":"themes/polarbear/layout/_script/theme.swig","hash":"44582de16d91f5cde5fa28a21db408385a46ff8e","modified":1490096797000},{"_id":"themes/polarbear/source/css/_base.scss","hash":"27c36dfe4b2d159c64e666bfe8561fbdc591e6a5","modified":1490096797000},{"_id":"themes/polarbear/source/css/_layout.scss","hash":"adfe6b08a183326e2115974860d1862288d4789c","modified":1490096797000},{"_id":"themes/polarbear/source/css/_variables.scss","hash":"d3f72d21bdd3cae17118323ae7f20f04d484a0f5","modified":1490096797000},{"_id":"themes/polarbear/source/css/style.scss","hash":"2f1d29a63c3c8f8c615049b0233db528b6ab3230","modified":1490096797000},{"_id":"themes/polarbear/.git/refs/heads/master","hash":"dc1e7e1f4630adf2ed6f5e9d788d0648dc475230","modified":1490096797000},{"_id":"themes/polarbear/.git/objects/pack/pack-0c6ac493ff22961635844ab9acb16de2b224573d.idx","hash":"9d912d46a2e7283875b95ec16418404f585001ad","modified":1490096797000},{"_id":"themes/polarbear/layout/_partial/_head/meta.swig","hash":"5eef6defbaf10f3f6d3b341d2d1af2e4d7aeb5a9","modified":1490096797000},{"_id":"themes/polarbear/layout/_partial/_widget/categories.swig","hash":"8bb8094fd3d96c0dd7e58fd658384a5df3a7e2ec","modified":1490096797000},{"_id":"themes/polarbear/layout/_partial/_widget/tags.swig","hash":"a14e2bda31b15cac11c29d0abb623543a6c87edc","modified":1490096797000},{"_id":"themes/polarbear/layout/_script/_analytics/baidu-analytics.swig","hash":"5d62309b16071f1b6952891ec8e1f1d42e38a088","modified":1490096797000},{"_id":"themes/polarbear/layout/_partial/_widget/custom.swig","hash":"a82b64295f240d40cd86f400faf875d90d150b20","modified":1490096797000},{"_id":"themes/polarbear/layout/_script/_comments/disqus.swig","hash":"f0e8b2ff1556622c0dee10a82e77646695b0f8dd","modified":1490096797000},{"_id":"themes/polarbear/layout/_script/_analytics/google-analytics.swig","hash":"f44684799386fbd4af6e5994b0c14c85eeff060c","modified":1490096797000},{"_id":"themes/polarbear/layout/_script/_comments/duoshou.swig","hash":"582cf94bc12b56c6a16b5f3aa0067b51f74b0d40","modified":1490096797000},{"_id":"themes/polarbear/source/css/_common/_animation.scss","hash":"725af3ea621de186d6d61749836d5b491a96c1e4","modified":1490096797000},{"_id":"themes/polarbear/source/css/_common/_utils.scss","hash":"7719505ff3185a9f8fad05fe092fa91dd63d900c","modified":1490096797000},{"_id":"themes/polarbear/source/css/_custom/_custom.scss","hash":"d0873cd8554d515282a6792fcc3f5bd4a256b7a6","modified":1490096797000},{"_id":"themes/polarbear/source/css/_common/_normalize.scss","hash":"259a1a0584f43efa6de2573a45fedfd59d4f39c0","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_archive.scss","hash":"d4fa3756a4cab145f76fccc3c69d81b3412cec36","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_back-to-top.scss","hash":"c6f586ac04a9a0f3633dadf5c66be9e0c4027f1d","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_categories.scss","hash":"eb9fa27704fa280c6e8cc7b7f44b283cd2fe4ad3","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_header.scss","hash":"b4e97e6704ab530ec3b789866d689b736e36de9e","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_footer.scss","hash":"5d708caa8a96f84642404fe8a0d7a755092710db","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_iconfont.scss","hash":"ae9d1019bdbe6de4fe97aabbd42f489039e978a0","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_pagination.scss","hash":"7362208b41453429adae449acc916f8633077248","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_tags.scss","hash":"1928c8483f51035edccd6899d7f4ee06673f2804","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_widget.scss","hash":"2fcea4e8e43b79c73bf4bd6dbf0c1a2368d4c6ef","modified":1490096797000},{"_id":"themes/polarbear/source/js/src/theme.js","hash":"5e2e4a290e595a5ebdd8b6866a08700ca20f1c2c","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_post.scss","hash":"71bfa582c26c491c8791dadbc3cb135284a123a2","modified":1490096797000},{"_id":"themes/polarbear/source/js/src/bootstrap.js","hash":"edb8690492039f4a4c9b83a3b9abda6d8a214984","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.js","hash":"39357ff994e53ea15c582b6106094396835a8be0","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.css","hash":"79df8b1839cbcb82a0fd9738289eb43c1bc77026","modified":1490096797000},{"_id":"themes/polarbear/.git/objects/pack/pack-0c6ac493ff22961635844ab9acb16de2b224573d.pack","hash":"9c0787d5f9d0bea138cb388b1e49adf1ab0f627c","modified":1490096797000},{"_id":"themes/polarbear/source/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1490096797000},{"_id":"themes/polarbear/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_post/_code.scss","hash":"446dbbc70ba45e41079e2954549c248f5affc7c0","modified":1490096797000},{"_id":"themes/polarbear/.git/logs/refs/heads/master","hash":"7ebc2ede8c9068f0960d2a3eea7ae80ea3b47fec","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_post/_content.scss","hash":"899c7c25bfa4fe00d85734af0d71bc4caf2a7337","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_post/_footer.scss","hash":"d4c0fc62e69412304691d58984fec0aa963e1117","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490096797000},{"_id":"themes/polarbear/source/css/_partial/_post/_header.scss","hash":"ceca6f4b00154542c57bc6fe451e01892a9338d2","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1490096797000},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490096797000},{"_id":"themes/polarbear/.git/logs/refs/remotes/origin/HEAD","hash":"7ebc2ede8c9068f0960d2a3eea7ae80ea3b47fec","modified":1490096797000},{"_id":"themes/even/.eslintrc","hash":"af17814aa6d4f488f9c09a727652a7efc1552c03","modified":1490096991000},{"_id":"themes/even/LICENSE","hash":"6fd796a4c624297885ceed920ac7130a96f29a85","modified":1490096991000},{"_id":"themes/even/_config.yml","hash":"20c04459c31d19e4666d0bec07b85dc8c4a08e76","modified":1490096991000},{"_id":"themes/even/README.md","hash":"e7adff2a1ec8b72feaee61fbc5467693570c1de3","modified":1490096991000},{"_id":"themes/even/.gitignore","hash":"1d54f4b6fe44e61eae3d29e95de4b2618a6619aa","modified":1490096991000},{"_id":"themes/even/package.json","hash":"425f33c9ddf7636a1c4b6d21ea1ff48b8d14cd78","modified":1490096991000},{"_id":"themes/even/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1490096976000},{"_id":"themes/even/.git/index","hash":"e3aab2daf82e71d332b2754b8f84a2c4eb4a87bb","modified":1490096991000},{"_id":"themes/even/.git/config","hash":"5ef1223485809abf438784735be8518631c5a612","modified":1490096991000},{"_id":"themes/even/.git/packed-refs","hash":"be4e4e157753218657eb4d57b666fe423852d236","modified":1490096991000},{"_id":"themes/even/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1490096991000},{"_id":"themes/even/layout/_layout.swig","hash":"011a510b0977c40bda922d5969d39071f0e8ae99","modified":1490096991000},{"_id":"themes/even/languages/zh-cn.yml","hash":"9fca22d97f9381afc187e9b14d9f8de5c0f5d9c5","modified":1490096991000},{"_id":"themes/even/languages/en.yml","hash":"e5eebf05f48a53020ee798cac58b0c3e7f0a95f2","modified":1490096991000},{"_id":"themes/even/languages/default.yml","hash":"eeaa1cf150c669c08f4b70336c819b8a8eac1d0b","modified":1490096991000},{"_id":"themes/even/layout/categories.swig","hash":"dc244e0ee1fc34f43d5b195b9c1f6ef6d3ad2d0d","modified":1490096991000},{"_id":"themes/even/layout/page.swig","hash":"3a767206198efb3eb487d7061107212c2171106c","modified":1490096991000},{"_id":"themes/even/layout/archive.swig","hash":"30971263c38e67bffb6fdd90d458f6c82a75c05d","modified":1490096991000},{"_id":"themes/even/layout/index.swig","hash":"f3341b5f4af1eab0930a1d078b3022bbe0a59232","modified":1490096991000},{"_id":"themes/even/layout/post.swig","hash":"a0ed82a3aa04d3554dd654a3cf6194644ae1574c","modified":1490096991000},{"_id":"themes/even/layout/tags.swig","hash":"ae9500008d0b445d1962a34cdb59fde3106ed33a","modified":1490096991000},{"_id":"themes/even/source/favicon.ico","hash":"0505cec3b99707df7a681de37177b3cf7950cc5d","modified":1490096991000},{"_id":"themes/even/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1490096976000},{"_id":"themes/even/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1490096976000},{"_id":"themes/even/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1490096976000},{"_id":"themes/even/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1490096976000},{"_id":"themes/even/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1490096976000},{"_id":"themes/even/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1490096976000},{"_id":"themes/even/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1490096976000},{"_id":"themes/even/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1490096976000},{"_id":"themes/even/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1490096976000},{"_id":"themes/even/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1490096976000},{"_id":"themes/even/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1490096976000},{"_id":"themes/even/.git/logs/HEAD","hash":"6ba84426434084e4fb41e2d43d43eeee03c905c8","modified":1490096991000},{"_id":"themes/even/layout/_macro/post.swig","hash":"d53a9b2920f744209984add5131fc965850c027e","modified":1490096991000},{"_id":"themes/even/layout/_partial/head.swig","hash":"5497cb03439d90b4ba7148bbc1e9d303539bb388","modified":1490096991000},{"_id":"themes/even/layout/_partial/footer.swig","hash":"248a60fe0122daf3706a291e4313f629de29384f","modified":1490096991000},{"_id":"themes/even/layout/_macro/archive.swig","hash":"09cde870c8392d93d4bde0862f2f53a87b196ad4","modified":1490096991000},{"_id":"themes/even/layout/_partial/header.swig","hash":"01972309c0804558c5b5476fa219ce000330f244","modified":1490096991000},{"_id":"themes/even/layout/_partial/slideout.swig","hash":"d046aa352c8e3f298c21ce537bd3dffc63e33abc","modified":1490096991000},{"_id":"themes/even/layout/_partial/pagination.swig","hash":"3843e523b9a7a1c5973d0c2de05cc88467733e09","modified":1490096991000},{"_id":"themes/even/layout/_partial/comments.swig","hash":"4bdae8e9d7031b927b3af9596d05f7a4fb4a866a","modified":1490096991000},{"_id":"themes/even/layout/_script/analytics.swig","hash":"24ba4a8adcaf09c9ede76405ee732385595d8e39","modified":1490096991000},{"_id":"themes/even/layout/_script/comments.swig","hash":"86b601ccb00d7283507e40deb328a3d28da60292","modified":1490096991000},{"_id":"themes/even/layout/_script/config.swig","hash":"7f2a1da26b780079214457d85136ffffaf36092f","modified":1490096991000},{"_id":"themes/even/layout/_script/libs.swig","hash":"67940ae28766608a3d6f287ecc95fa05db49f243","modified":1490096991000},{"_id":"themes/even/layout/_script/search.swig","hash":"02c3361c9b8645e00be01f51b49b562d9e51858f","modified":1490096991000},{"_id":"themes/even/layout/_script/theme.swig","hash":"cb81a0a6a6d5264cc6451dda3dd3a96101f89b1d","modified":1490096991000},{"_id":"themes/even/source/css/_base.scss","hash":"d03265b755abb63f8189750b20321c6aef7b7d7d","modified":1490096991000},{"_id":"themes/even/source/css/style.scss","hash":"6c57b95c4f936c7cc2a7047150b163919038168e","modified":1490096991000},{"_id":"themes/even/source/css/_variables.scss","hash":"0d7c87defe2bfc316172564b2caef42d8f966675","modified":1490096991000},{"_id":"themes/even/layout/_partial/_footer/social.swig","hash":"65368d0a5108fecc072eaea3b1fb04c597941729","modified":1490096991000},{"_id":"themes/even/.git/refs/heads/master","hash":"ee09e953ff31da5697f26ce93fe5893f638c87f2","modified":1490096991000},{"_id":"themes/even/layout/_partial/_head/meta.swig","hash":"4692e4aa4675e069f886b7ee49bd610c00f3e3bd","modified":1490096991000},{"_id":"themes/even/layout/_partial/_post/copyright.swig","hash":"dbd57ececb200ee220189f51cc748023b96592d8","modified":1490096991000},{"_id":"themes/even/layout/_partial/_post/reward.swig","hash":"faf64b5461970fda72863e9779f3f024cb493658","modified":1490096991000},{"_id":"themes/even/layout/_partial/_post/toc.swig","hash":"fc21e5b9ebaca219678d85b8c5e4b3ee013fca25","modified":1490096991000},{"_id":"themes/even/layout/_script/_analytics/baidu-analytics.swig","hash":"5d62309b16071f1b6952891ec8e1f1d42e38a088","modified":1490096991000},{"_id":"themes/even/layout/_script/_analytics/google-analytics.swig","hash":"f44684799386fbd4af6e5994b0c14c85eeff060c","modified":1490096991000},{"_id":"themes/even/layout/_script/_comments/disqus.swig","hash":"0502145777d65515249680d3e4611f249e3d9ff8","modified":1490096991000},{"_id":"themes/even/layout/_script/_comments/duoshou.swig","hash":"582cf94bc12b56c6a16b5f3aa0067b51f74b0d40","modified":1490096991000},{"_id":"themes/even/source/css/_common/_normalize.scss","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1490096991000},{"_id":"themes/even/source/css/_common/_animation.scss","hash":"f32d2444f0ab4dcb8b811ae1bccae6073f21a988","modified":1490096991000},{"_id":"themes/even/source/css/_common/_utils.scss","hash":"21dfd8cfdb574504b97896a282044d93d972e338","modified":1490096991000},{"_id":"themes/even/source/css/_custom/_custom.scss","hash":"d0873cd8554d515282a6792fcc3f5bd4a256b7a6","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_archive.scss","hash":"019ee950e5da4395c867b950c8da06d03310b3db","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_back-to-top.scss","hash":"c6f586ac04a9a0f3633dadf5c66be9e0c4027f1d","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_categories.scss","hash":"96f47000d25ef4e0e948f8f43fa4e2983ff0d746","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_footer.scss","hash":"76f3a72440be8aa1e93d8ddc5ea958777d1545ab","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_header.scss","hash":"4a3e92feef33bed0021f1a65a801c24ee7d5946f","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_iconfont.scss","hash":"2a68735df51cf6b1c9559e70814ac311804cd8eb","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_mobile.scss","hash":"0d1c60bd92f8e5db01e7843934251152ec4d6d44","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_pagination.scss","hash":"b24db39534e180ebcebba2e81d91d9f1d534eea1","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_post.scss","hash":"7d03216b1fb5007ecc33412cacab74432c4e02d2","modified":1490096991000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","hash":"fef78bd502f74fdbf0316123e176454cb3eb4e50","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_tags.scss","hash":"fb4bf54b34291d5b72598a7ba4d3e370c8ad9383","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_slideout.scss","hash":"e4820a42698f647a824575b234835b9ce4ac4797","modified":1490096991000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","hash":"95beafe485d4bdbddfecbcf3b2bc9b2d9cf5f5c5","modified":1490096991000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","hash":"5e25c531901d8a9e37ab45a7f4acdbe5324b51b6","modified":1490096991000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","hash":"afd0f74128f1c21c5a542b2e100870e74da663b6","modified":1490096991000},{"_id":"themes/even/source/js/src/search.js","hash":"9ab2f14dc2cd2e97f2e596ad85175c8777fa966d","modified":1490096991000},{"_id":"themes/even/source/js/src/bootstrap.js","hash":"c37073db93271410e30dfa9a894fc78a4f025abd","modified":1490096991000},{"_id":"themes/even/source/js/src/even.js","hash":"9491d0c34812d76d5caf303100b17510ff8f0fc3","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1490096991000},{"_id":"themes/even/source/lib/slideout/slideout.min.js","hash":"7166ed307b771398a593fc3d4f1c5d93fbbe19bb","modified":1490096991000},{"_id":"themes/even/source/lib/slideout/slideout.js","hash":"81ec76a63f6f4bbdfc801d822182ab8afa9068fe","modified":1490096991000},{"_id":"themes/even/.git/objects/pack/pack-27f2e9a2e366ee9d4b2e1199e35049ecce84b7a0.idx","hash":"adadb01b9a6ea1b09a876d5feffd1d6412819a46","modified":1490096991000},{"_id":"themes/even/source/image/reward/alipay.png","hash":"75e0f7d3f804f5ed5f6978ffdc6522224df1b701","modified":1490096991000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","hash":"a94e508f306a742637653f98c6e8827b11d3c142","modified":1490096991000},{"_id":"themes/even/.git/logs/refs/heads/master","hash":"6ba84426434084e4fb41e2d43d43eeee03c905c8","modified":1490096991000},{"_id":"themes/even/source/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1490096991000},{"_id":"themes/even/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_footer/_copyright.scss","hash":"afbc0f90c674e5cd5fd7509eb1296d60b999d4e1","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_footer/_social.scss","hash":"bca6a1036951c2475278bfbd3a5ce51ff861e9a3","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_header/_logo.scss","hash":"109073dde15146d835bf06faa2f256d1ac658315","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_header/_menu.scss","hash":"c823489bc6c0f320618362f9e07d9114b9f8612b","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_header/_search.scss","hash":"b272e3f0fba05d66de648717f6dfe2718637e8f6","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_post/_code.scss","hash":"d866ae4f05dd3f65e55388727c1277ace55d4c7c","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_post/_copyright.scss","hash":"9e33c5935885552d6abdf43e2b1e5a278211f052","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_post/_footer.scss","hash":"9f2ab0ac20b2a8bfd315febd387c399f72f43d10","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_post/_header.scss","hash":"794b85495d917e24bbe2f2782f3c7e69b6845eee","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_post/_content.scss","hash":"a00cd224d832aff0c4a6deefc0b2b91fe4548172","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_post/_reward.scss","hash":"66ec9faa27ed879dc9a2ca59c73ed6bfd5e61dcd","modified":1490096991000},{"_id":"themes/even/source/css/_partial/_post/_toc.scss","hash":"dba41bc7638e22c59eb704fc6de80c32d6f1ed52","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490096991000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1490096991000},{"_id":"themes/even/source/image/reward/wechat.png","hash":"f9904f25b35fa9d38e221ef7089787d24ee8b02b","modified":1490096991000},{"_id":"themes/even/.git/logs/refs/remotes/origin/HEAD","hash":"6ba84426434084e4fb41e2d43d43eeee03c905c8","modified":1490096991000},{"_id":"themes/even/.git/objects/pack/pack-27f2e9a2e366ee9d4b2e1199e35049ecce84b7a0.pack","hash":"0eccbab5cd397f8f14a94f2ebb750b39c15f4873","modified":1490096991000},{"_id":"themes/even/.DS_Store","hash":"bcd606b16bdf1e94861ebaae902bba13294750ad","modified":1490097377000},{"_id":"themes/even/source/.DS_Store","hash":"63a85d71097f13f1db6e4823a35053a477b347a3","modified":1490097193000},{"_id":"themes/even/layout/.DS_Store","hash":"5defad9917bc2c18e7756d1624f5f2a7b0d78909","modified":1490097188000},{"_id":"themes/even/source/css/.DS_Store","hash":"db490ca5456b651f0f1b1b218304690522d96439","modified":1490097193000},{"_id":"source/.DS_Store","hash":"0c088b8769a71c2b69d8fee8003a5f0d16689168","modified":1490097831000},{"_id":"source/_posts/2017-3-20-How-to-use-algebraic-data-type-in-development.md","hash":"47e072a452d9a6ddda9b51a92fea4516138faaaa","modified":1490062037000},{"_id":"source/_posts/.DS_Store","hash":"0c878baddd9c98ad743ec493975c497bed9e9d30","modified":1490097802000},{"_id":"themes/polarbear/layout/.DS_Store","hash":"6c6e01f9555ca5ee648643d9bcd359a18508f74e","modified":1490097845000},{"_id":"public/2017/03/21/hello-world/index.html","hash":"05e965fe4cc4aa08f6c103dac1e3d2ad540ff573","modified":1490098058395},{"_id":"public/archives/index.html","hash":"45764d49b7f996704f86b44a2eb3072830e83712","modified":1490098058395},{"_id":"public/index.html","hash":"631eb9a75f6db674b1ff6c36dd3c20fdae368b46","modified":1490098058395},{"_id":"public/2017/03/20/2017-3-20-How-to-use-algebraic-data-type-in-development/index.html","hash":"edf17282ecba29cb6cf67dd691085b181b2fdfc1","modified":1490098058395},{"_id":"public/favicon.ico","hash":"7d7c441f635c35b73f060f698773b14b7f306f4c","modified":1490098058398},{"_id":"public/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490098058398},{"_id":"public/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490098058398},{"_id":"public/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490098058398},{"_id":"public/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490098058398},{"_id":"public/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490098058398},{"_id":"public/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490098058398},{"_id":"public/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490098058398},{"_id":"public/js/src/bootstrap.js","hash":"edb8690492039f4a4c9b83a3b9abda6d8a214984","modified":1490098058414},{"_id":"public/js/src/theme.js","hash":"5e2e4a290e595a5ebdd8b6866a08700ca20f1c2c","modified":1490098058414},{"_id":"public/lib/fancybox/jquery.fancybox.css","hash":"79df8b1839cbcb82a0fd9738289eb43c1bc77026","modified":1490098058414},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490098058414},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1490098058415},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1490098058415},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490098058415},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1490098058415},{"_id":"public/lib/fancybox/jquery.fancybox.js","hash":"39357ff994e53ea15c582b6106094396835a8be0","modified":1490098058415},{"_id":"public/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1490098058415},{"_id":"public/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1490098058415},{"_id":"public/css/style.css","hash":"baa4d132879ef3c7a9aa2d939ceb6912ff0e026b","modified":1490098058433}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-03-21T11:44:40.000Z","updated":"2017-03-21T11:44:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0jh7mr70000ogxflw7rlxii","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"如何利用 ADT 良好地组织业务","_content":"\n在用 `Scala` 做业务开发的时候，我们大都会用到 `case class` 以及「模式匹配」，本文将介绍如何利用 `case class` 模拟 `ADT` 并在日常开发中利用 `ADT` 良好地组织业务。\n\n## ADT（代数数据类型）\n\n> 在计算机编程、特别是函数式编程与类型理论中，`ADT` 是一种 组合类型（`composite type`）。例如，一个类型由其它类型组合而成。两个常见的代数类型是 `product`（积）类型 (比如 `tuples` 和 `records` )和`sum`（和）类型，它也被称为 `tagged unions` 或 `variant type`。\n\n这里简单介绍一下常见的两种代数类型 `product`（积）类型和 `sum`（和）类型\n\n### 计数（Counting）\n\n在介绍两种常见代数类型之前我们先介绍一下 「计数」 的概念，方面理解后面所要介绍的内容。\n\n为了将某个类型与我们熟悉的数字代数相关联，我们可以计算该类型有多少种取值，例如 `Bool` 类型：\n\n```\ndata Bool = true | false\n```\n\n可以看到 `Bool` 类型有两种可能的取值，要么是 `false`, 要么是 `true`, 所以这里我们暂时将数字 `2` 与 `Bool` 类型相关联。\n\n如果 `Bool` 类型是 `2`，那么何种类型是 `1` 呢，在 `Scala` 中 `Unit` 类型只有一种取值：\n\n```scala\nscala> val a = ()\na: Unit = ()\n```\n\n所以这里我们将数字 `1` 与 `Unit` 类型相关联。\n\n有了 「计数」 这个概念，接下来我们介绍常见的两种代数类型。\n\n### product\n\n`product` 可以理解为是一种 组合`（combination）`，可以通过我们熟悉的 `*`（乘法） 操作来产生，对应的类型为：\n\n```\ndata Mul a b = Mul a b\n```\n也就是说， `a * b ` 类型是同时持有 `a` 和 `b` 的容器。\n\n在 `Scala`中，`tuples`（元组）就是这样的，eg：\n\n```scala\nscala> val b = (Boolean, Boolean)\nb: (Boolean.type, Boolean.type) = (object scala.Boolean,object scala.Boolean)\n```\n我们定义的 「元组 `b`」 就是两个 `Boolean` 类型的组合，也就是说，「元组 `b`」 是同时拥有两个 `Boolean` 类型的容器，可以通过我们前面介绍的 「计数」 的概念来理解：\n\n`Boolean` 类型有两种取值，当 `Boolean` 和 `Boolean` 通过 `*` 操作进行组合时：\n\n```scala\n2 * 2 = 4\n```\n\n所以我们定义的 「元组 `b`」 有四种可能的取值，我们利用 「模式匹配 来列举这四种取值：\n\n```scala\nb match {\n  case (true, true) => ???\n  case (true, false) => ???\n  case (false, true) => ???\n  case (false, false) => ???\n}\n```\n\n### sum\n\n`sum` 可以理解为是一种 `alternation`（选择），可以通过我们熟悉的 `+ （加法）` 操作来产生，对应的类型为：\n\n```\ndata Add a b = AddL a | AddR b\n```\n\n`a + b` 是一个和类型，同时拥有 `a` 或者 `b`。\n\n注意这里是 a `或者` b，不同于上面介绍的 `*`。\n\n这里可能就会有疑惑了，为什么 `+`（加法） 是 `或者` 呢，我们依然通过前面介绍的 「计数」 的概念来理解：\n\n在 `Scala` 中 `Option` 就是一种 `sum` 类型，eg：\n\n```scala\nscala> val c = Option(false)\nc: Option[Boolean] = Some(false)\n```\n`option[Boolean]` 其实是 `Boolean` 与 `None` 通过 `+` 操作得到的，分析：\n\n`Boolean` 有两种取值，`None` 只有一种，那么：\n\n```scala\n2 + 1 = 3\n```\n\n所以我们定义的 `c: Option[Boolean]` 有三种可能的取值，我们利用 「模式匹配」 来列举这三种取值：\n\n```scala\nc match {\n  case Some(true) => ???\n  case Some(false) => ???\n  case None => ???\n}\n```\n我们可以看到，`Option[Boolean]` 类型的取值要么是 `Boolean` 类型，要么是 `None` 类型，这两种类型是`不能同时`存在的，这一点与 `product` 类型不同。并且 `sum` 类型是一个「闭环」，类型的定义已经包含了所有可能性，绝无可能会出现非法状态。\n\n## 在业务中使用 ADT\n\n我们在利用 `Scala` 的 `case class` 组织业务的时候其实就已经用到了 `ADT`，eg：\n\n```scala\nsealed trait Tree\ncase class Node(left: Tree, right: Tree) extends Tree\ncase class Leaf[A](value: A) extends Tree\n```\n在上面 「树」 结构的定义中，`Node`、`Leaf` 通过继承 `Tree`，通过这种继承关系而得到的类型就是 `ADT` 中的 `sum`，而构造 `Node` 和 `Leaf` 的时候则是 `ADT` 中的 `product`。大家可以通过我们前面所说的 「计数」的概念来验证。\n\n上面的代码中出现了一个关键字 `sealed`，我们先介绍一下这个关键字。\n\n### Sealed\n\n前面我们说过 `sum` 类型是一个 「闭环」，当我们将「样例类」的「超类」声明为 `sealed` 后，该超类就变成了一个 「密封类」，「密封类」的子类都必须在与该密封类相同的文件中定义，从而达到了上面说的「闭环」的效果。\n\n比如我们现在要为上面的 `Tree` 添加一个 `EmptyLeaf`：\n\n```scala\ncase object EmptyLeaf extends Tree\n```\n那这段被添加的代码必须放在我们上面声明 `Tree` 的那个文件里面，否则会报错。\n\n另外，`sealed` 关键字也可以让「编译器」检查「模式」语句的完整性,eg：\n\n```scala\nsealed trait Answer\ncase object Yes extends Answer\ncase object No extends Answer\n\nval x: Answer = Yes\n\nx match {\n    case Yes => println(\"Yes\")\n}\n\n<console>: warning: match may not be exhaustive.\nIt would fail on the following input: No\n       x match {\n       ^\n```\n\n「编译器」会在编译阶段提前给我们一个可能会出错的「警告（warning）」\n\n### 利用 ADT 来良好地组织业务\n\n前面说了这么多，终于进入正题了，接下来我们以几个例子来说明如何在开发中合理地利用 `ADT`。\n\n#### 场景一\n\n现在我们要开发一个与「优惠券」有关的业务，一般情况下，我们可能会这么去定义优惠券的结构：\n\n```scala\ncase class Coupon (\n  id: Long,\n  baseInfo: BaseInfo,\n  `type`: String,\n  ...\n)\n\nobject Coupon {\n\n  //优惠券类型\n  object Type {\n\n    // 现金券\n\n    final val CashType       = \"CASH\"\n\n    //折扣券\n\n    final val DiscountType   = \"DISCOUNT\"\n\n    // 礼品券\n\n    final val GiftType       = \"GIFT\"\n  }\n}\n```\n\n分析：这样去定义 「优惠券」 的结构也能解决问题，但是当 「优惠券」 类型增多的时候，会出现很多的冗余数据。比如说，不同的优惠类型，会有不同优惠信息，这些优惠信息在结构中对应的字段也会有所不同：\n\n```scala\ncase class Coupon (\n  id: Long,\n  baseInfo: BaseInfo,\n  `type`: String,\n\n  // 仅在优惠券类型是代金券的时候使用\n\n  leastCost: Option[Long],\n  reduceCost: Option[Long],\n\n  //仅在优惠券类型是折扣券的时候使用\n\n  discount: Option[Int],\n\n  //仅在优惠券是礼品券的时候使用\n\n  gift: Option[String]\n)\n```\n\n从上定义的结构我们可以看到，当我们使用 「礼品券」 的时候，有三个字段（`leastCost`、`reduceCost`、`discount`）的值是 `None`，因为我们根本就用不到。由此可以看出，当 「优惠券」 的结构比较复杂的时候，可能会产生大量的冗余字段，从而使我们的代码看上去非常臃肿，同时增加了我们的开发难度。\n\n##### 利用 `ADT` 重新组织：\n\n分析：通过上面的讨论，我们知道 「优惠券」 可能有多种类型，所以，我们利用 `ADT` 将不同的「优惠券」分离开来：\n\n```scala\n\n// 将每一种优惠券公共的部分抽离出来\n\nsealed trait Coupon {\n  val id: Long\n  val baseInfo: BaseInfo\n  val `type`: String\n  ...\n}\n\ncase class CashCoupon (\n  id: Long,\n  baseInfo: BaseInfo,\n  `type`: String = Coupon.Type.CashType,\n  leastCost: Long,\n  reduceCost: Long,\n  ...\n) extends Coupon\n\ncase class DiscountCoupon (\n  id: Long,\n  baseInfo: BaseInfo,\n  `type`: String = Coupon.Type.DiscountType,\n  discount: Int,\n  ...\n) extends Coupon\n\ncase class GiftCoupon (\n  id: Long,\n  baseInfo: BaseInfo,\n  `type`: String = Coupon.Type.GiftType,\n  gift: String,\n  ...\n) extends Coupon\n```\n\n同过合理地利用 `ADT` 我们使每一种「优惠券」的结构更加清晰，同时也减少了字段的冗余。并且，如果在业务后期我们还要增加别的 「优惠券」类型，我们不用修改原来的结构，只需要再重新创建一个新的 `case class` 就可以了：\n\n比如我们在后期增加了一种叫 「团购券」 的优惠券，我们不需要修改原来定义的结构，直接：\n\n```scala\ncase class GroupCoupon (\n  id: Long,\n   baseInfo: BaseInfo,\n   `type`: String,\n   dealDetail: String\n)\n```\n\n并且在利用「模式匹配」的时候，我们可以像操作代数那样：\n\n```scala\ncoupon match {\n  case c: CashCoupon => ???       // 我们可以直接在匹配完成之后使用 coupon\n  case c: DiscountCoupon => ???\n  case c: GiftCoupon => ???\n  case c: GroupCoupon => ???\n}\n\n// 如果是我们用 ADT 改造前的数据结构，那模式匹配就会变成：\n\ncoupon.`type` match {\n  case Coupon.Type.CashType => ???      // 我们只能使用 coupon.`type`\n  case Coupon.Type.GiftType => ???\n  case Coupon.Type.DiscountType => ???\n  case Coupon.Type.GroupCoupon => ???\n}\n```\n\n通过本例，我们可以看到，利用 `ADT` 重新组织之后的数据结构减少了数据的冗余，并且在使用「模式匹配」的时候更加清晰，在功能上也更加强大。\n\n#### 场景二\n\n假设我们现在要实现一个「抽奖活动」的业务：\n\n1. 该抽奖活动有开始时间和结束时间，结束之后活动就不能参与了\n\n2. 该抽奖活动有一等奖、二等奖、三等奖以及不中奖\n\n3. 每种奖项都有一定的中奖概率，用户可能会中奖可能不会中奖\n\n根据上面的需求描述，我们可以很快地构建出如下结构：\n\n```scala\n//定义活动\ncase class Activity (\n  id: Long,\n  name: String,\n  startAt: DateTime,\n  endAt: DateTime,\n  firstPrize: Long,      //用奖品的id来关联不同奖项对应的奖品\n  secondPrize: Long,\n  thirdPrize: Long,\n  ...\n)\n\n//定义奖品\ncase class Pize (\n  id: Long,\n  rate: Float,\n  quantity: Int,\n  detail: String,\n  ...\n)\n\n//定义用户\ncase class User (\n  id: Long,\n  name: String,\n  sex: String,\n  phone: String,\n  ...\n)\n```\n定义好基本的结构之后，我们要去描述用户参加「抽奖活动」这一行为的「结果」，一般情况下， 我们会构造出如下结构：\n\n```scala\ncase class UserActivity (\n  id: Long,\n  userId: Long,\n  activityId: Long,\n  status: Int,                 \n  prizeType: Option[Long],   //奖品的类型，判断是几等奖\n  prize: Option[Long]        //奖品id\n)\n\nobject UserActivity {\n  object Status {\n    final val HasPrize = 1\n    final val NoPrize = 2\n    final val ActivityExpired = 0\n  }\n}\n```\n现在我们就利用这些结构来完成一些基本的需求，假设我们要根据用户参与「抽奖活动」的「结果」来渲染页面：\n\n分析：用户参与抽奖的结果有大概如下几种：\n\n1. 成功参与活动，并且中奖\n\n2. 成功参与活动，没有中奖\n\n3. 活动已经过期，用户不能参与活动\n\n那我们可能会这样去组织我们的逻辑：\n\n```scala\ndef f(ua: UserActivity) = ua.status match {\n  case UserActivity.Status.HasPrize => ???\n  case UserActivity.Status.NoPrize => ???\n  case UserActivity.Status.ActivityExpired => ???\n}\n```\n我们根据抽奖结果「状态」的不同而去渲染不同的页面，这样似乎能解决问题，但是，如果我们想要在「模式匹配」完成之后根据用户信息，奖品信息以及活动信息来渲染页面的话，就需要：\n\n```scala\ndef f(ua: UserActivity) = ua.status match {\n  case UserActivity.Status.HasPrize => {\n    //假设用户中奖了，我们需要显示用户的信息，活动信息以及奖品信息,则：\n    getUser(ua.userId)          //获取用户信息\n    getActivity(ua.activityId)  //获取活动信息\n    getPrize(ua.prize)          //获取奖品信息\n    ...\n  }\n  case UserActivity.Status.NoPrize => ???\n  case UserActivity.Status.ActivityExpired => ???\n}\n```\n\n我们在每一次模式匹配完成之后都要去做一大堆获取信息的工作，如果后期需要的信息量很多，那么这里的代码将显得十分臃肿。\n\n##### 利用 `ADT` 重新组织：\n\n通过上面分析，我们知道，用户参与活动的过程中会涉及到许多信息，那我们就利用 `ADT` 将这些信息全部构造在一起：\n\n```scala\ncase class UserActivity (\n  id: Long,\n  user: User,\n  activity: Activity,\n  prize: Option[Prize],\n  status: Int\n)\n```\n通过这样组织，我们的信息就非常完备了，在之前的「模式匹配」中，我们可以直接去用这些数据，而不用再次去获取。但是上面的结构还存在一些不足：\n\n1. 我们利用模式匹配的时候还是要根据活动的「状态」去匹配，参考「场景一」\n\n2. 如果后续业务变得复杂 `UserActivity` 中的字段可能会很多\n\n所以我们能否再将数据进一步抽象？\n\n分析：用户参加活动的结果无非就是我们上面列举的几个状态，那我们就将这些状态利用 `ADT` 再重新组织一下：\n\n```scala\nsealed trait Status {\n  val id: Long,\n  val detail: StatusDetail\n}\n\ncase calss StatusDetail {\n  user: User,\n  activity: Activity\n  prize: Option[Prize]\n}\n\ncase class HasPrize (\n  id: Long,\n  detail: StatusDetail\n) extends Status\n\ncase class NoPrize (\n  id: Long,\n  detail: StatusDetail\n) extends Status\n\ncase class ActivityExpired (\n  id: Long,\n  detail: StatusDetail\n) extends Status\n```\n\n通过上面的改造，用户参与活动的状态变得更加清晰，同时对外暴露的结构也变得更加简洁，在使用「模式匹配」的时候，我们就可以：\n\n```scala\ndef f(status: Status) = status match {\n  case HasPrize(id, detail) => ???        //可以直接使用status\n  case NoPrize(id, detail) => ???\n  case ActivityExpired(id, detail) => ???\n}\n```\n\n通过本例，我们可以发现，通过 `ADT` 可以将数据`高度抽像`，使得数据的「具体信息」变得简洁，同时「概括能力」变得更强，数据更加「完备」。\n\n## 延伸阅读\n\n[Algebraic data type](https://wiki.haskell.org/Algebraic_data_type)\n\n[The Algebra of Algebraic Data Types, Part 1](http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/)\n\n[The Algebra of Algebraic Data Types, Part 2](http://chris-taylor.github.io/blog/2013/02/11/the-algebra-of-algebraic-data-types-part-ii/)\n\n[The Algebra of Algebraic Data Types, Part 3](http://chris-taylor.github.io/blog/2013/02/13/the-algebra-of-algebraic-data-types-part-iii/)\n","source":"_posts/2017-3-20-How-to-use-algebraic-data-type-in-development.md","raw":"---\ntitle: 如何利用 ADT 良好地组织业务\n---\n\n在用 `Scala` 做业务开发的时候，我们大都会用到 `case class` 以及「模式匹配」，本文将介绍如何利用 `case class` 模拟 `ADT` 并在日常开发中利用 `ADT` 良好地组织业务。\n\n## ADT（代数数据类型）\n\n> 在计算机编程、特别是函数式编程与类型理论中，`ADT` 是一种 组合类型（`composite type`）。例如，一个类型由其它类型组合而成。两个常见的代数类型是 `product`（积）类型 (比如 `tuples` 和 `records` )和`sum`（和）类型，它也被称为 `tagged unions` 或 `variant type`。\n\n这里简单介绍一下常见的两种代数类型 `product`（积）类型和 `sum`（和）类型\n\n### 计数（Counting）\n\n在介绍两种常见代数类型之前我们先介绍一下 「计数」 的概念，方面理解后面所要介绍的内容。\n\n为了将某个类型与我们熟悉的数字代数相关联，我们可以计算该类型有多少种取值，例如 `Bool` 类型：\n\n```\ndata Bool = true | false\n```\n\n可以看到 `Bool` 类型有两种可能的取值，要么是 `false`, 要么是 `true`, 所以这里我们暂时将数字 `2` 与 `Bool` 类型相关联。\n\n如果 `Bool` 类型是 `2`，那么何种类型是 `1` 呢，在 `Scala` 中 `Unit` 类型只有一种取值：\n\n```scala\nscala> val a = ()\na: Unit = ()\n```\n\n所以这里我们将数字 `1` 与 `Unit` 类型相关联。\n\n有了 「计数」 这个概念，接下来我们介绍常见的两种代数类型。\n\n### product\n\n`product` 可以理解为是一种 组合`（combination）`，可以通过我们熟悉的 `*`（乘法） 操作来产生，对应的类型为：\n\n```\ndata Mul a b = Mul a b\n```\n也就是说， `a * b ` 类型是同时持有 `a` 和 `b` 的容器。\n\n在 `Scala`中，`tuples`（元组）就是这样的，eg：\n\n```scala\nscala> val b = (Boolean, Boolean)\nb: (Boolean.type, Boolean.type) = (object scala.Boolean,object scala.Boolean)\n```\n我们定义的 「元组 `b`」 就是两个 `Boolean` 类型的组合，也就是说，「元组 `b`」 是同时拥有两个 `Boolean` 类型的容器，可以通过我们前面介绍的 「计数」 的概念来理解：\n\n`Boolean` 类型有两种取值，当 `Boolean` 和 `Boolean` 通过 `*` 操作进行组合时：\n\n```scala\n2 * 2 = 4\n```\n\n所以我们定义的 「元组 `b`」 有四种可能的取值，我们利用 「模式匹配 来列举这四种取值：\n\n```scala\nb match {\n  case (true, true) => ???\n  case (true, false) => ???\n  case (false, true) => ???\n  case (false, false) => ???\n}\n```\n\n### sum\n\n`sum` 可以理解为是一种 `alternation`（选择），可以通过我们熟悉的 `+ （加法）` 操作来产生，对应的类型为：\n\n```\ndata Add a b = AddL a | AddR b\n```\n\n`a + b` 是一个和类型，同时拥有 `a` 或者 `b`。\n\n注意这里是 a `或者` b，不同于上面介绍的 `*`。\n\n这里可能就会有疑惑了，为什么 `+`（加法） 是 `或者` 呢，我们依然通过前面介绍的 「计数」 的概念来理解：\n\n在 `Scala` 中 `Option` 就是一种 `sum` 类型，eg：\n\n```scala\nscala> val c = Option(false)\nc: Option[Boolean] = Some(false)\n```\n`option[Boolean]` 其实是 `Boolean` 与 `None` 通过 `+` 操作得到的，分析：\n\n`Boolean` 有两种取值，`None` 只有一种，那么：\n\n```scala\n2 + 1 = 3\n```\n\n所以我们定义的 `c: Option[Boolean]` 有三种可能的取值，我们利用 「模式匹配」 来列举这三种取值：\n\n```scala\nc match {\n  case Some(true) => ???\n  case Some(false) => ???\n  case None => ???\n}\n```\n我们可以看到，`Option[Boolean]` 类型的取值要么是 `Boolean` 类型，要么是 `None` 类型，这两种类型是`不能同时`存在的，这一点与 `product` 类型不同。并且 `sum` 类型是一个「闭环」，类型的定义已经包含了所有可能性，绝无可能会出现非法状态。\n\n## 在业务中使用 ADT\n\n我们在利用 `Scala` 的 `case class` 组织业务的时候其实就已经用到了 `ADT`，eg：\n\n```scala\nsealed trait Tree\ncase class Node(left: Tree, right: Tree) extends Tree\ncase class Leaf[A](value: A) extends Tree\n```\n在上面 「树」 结构的定义中，`Node`、`Leaf` 通过继承 `Tree`，通过这种继承关系而得到的类型就是 `ADT` 中的 `sum`，而构造 `Node` 和 `Leaf` 的时候则是 `ADT` 中的 `product`。大家可以通过我们前面所说的 「计数」的概念来验证。\n\n上面的代码中出现了一个关键字 `sealed`，我们先介绍一下这个关键字。\n\n### Sealed\n\n前面我们说过 `sum` 类型是一个 「闭环」，当我们将「样例类」的「超类」声明为 `sealed` 后，该超类就变成了一个 「密封类」，「密封类」的子类都必须在与该密封类相同的文件中定义，从而达到了上面说的「闭环」的效果。\n\n比如我们现在要为上面的 `Tree` 添加一个 `EmptyLeaf`：\n\n```scala\ncase object EmptyLeaf extends Tree\n```\n那这段被添加的代码必须放在我们上面声明 `Tree` 的那个文件里面，否则会报错。\n\n另外，`sealed` 关键字也可以让「编译器」检查「模式」语句的完整性,eg：\n\n```scala\nsealed trait Answer\ncase object Yes extends Answer\ncase object No extends Answer\n\nval x: Answer = Yes\n\nx match {\n    case Yes => println(\"Yes\")\n}\n\n<console>: warning: match may not be exhaustive.\nIt would fail on the following input: No\n       x match {\n       ^\n```\n\n「编译器」会在编译阶段提前给我们一个可能会出错的「警告（warning）」\n\n### 利用 ADT 来良好地组织业务\n\n前面说了这么多，终于进入正题了，接下来我们以几个例子来说明如何在开发中合理地利用 `ADT`。\n\n#### 场景一\n\n现在我们要开发一个与「优惠券」有关的业务，一般情况下，我们可能会这么去定义优惠券的结构：\n\n```scala\ncase class Coupon (\n  id: Long,\n  baseInfo: BaseInfo,\n  `type`: String,\n  ...\n)\n\nobject Coupon {\n\n  //优惠券类型\n  object Type {\n\n    // 现金券\n\n    final val CashType       = \"CASH\"\n\n    //折扣券\n\n    final val DiscountType   = \"DISCOUNT\"\n\n    // 礼品券\n\n    final val GiftType       = \"GIFT\"\n  }\n}\n```\n\n分析：这样去定义 「优惠券」 的结构也能解决问题，但是当 「优惠券」 类型增多的时候，会出现很多的冗余数据。比如说，不同的优惠类型，会有不同优惠信息，这些优惠信息在结构中对应的字段也会有所不同：\n\n```scala\ncase class Coupon (\n  id: Long,\n  baseInfo: BaseInfo,\n  `type`: String,\n\n  // 仅在优惠券类型是代金券的时候使用\n\n  leastCost: Option[Long],\n  reduceCost: Option[Long],\n\n  //仅在优惠券类型是折扣券的时候使用\n\n  discount: Option[Int],\n\n  //仅在优惠券是礼品券的时候使用\n\n  gift: Option[String]\n)\n```\n\n从上定义的结构我们可以看到，当我们使用 「礼品券」 的时候，有三个字段（`leastCost`、`reduceCost`、`discount`）的值是 `None`，因为我们根本就用不到。由此可以看出，当 「优惠券」 的结构比较复杂的时候，可能会产生大量的冗余字段，从而使我们的代码看上去非常臃肿，同时增加了我们的开发难度。\n\n##### 利用 `ADT` 重新组织：\n\n分析：通过上面的讨论，我们知道 「优惠券」 可能有多种类型，所以，我们利用 `ADT` 将不同的「优惠券」分离开来：\n\n```scala\n\n// 将每一种优惠券公共的部分抽离出来\n\nsealed trait Coupon {\n  val id: Long\n  val baseInfo: BaseInfo\n  val `type`: String\n  ...\n}\n\ncase class CashCoupon (\n  id: Long,\n  baseInfo: BaseInfo,\n  `type`: String = Coupon.Type.CashType,\n  leastCost: Long,\n  reduceCost: Long,\n  ...\n) extends Coupon\n\ncase class DiscountCoupon (\n  id: Long,\n  baseInfo: BaseInfo,\n  `type`: String = Coupon.Type.DiscountType,\n  discount: Int,\n  ...\n) extends Coupon\n\ncase class GiftCoupon (\n  id: Long,\n  baseInfo: BaseInfo,\n  `type`: String = Coupon.Type.GiftType,\n  gift: String,\n  ...\n) extends Coupon\n```\n\n同过合理地利用 `ADT` 我们使每一种「优惠券」的结构更加清晰，同时也减少了字段的冗余。并且，如果在业务后期我们还要增加别的 「优惠券」类型，我们不用修改原来的结构，只需要再重新创建一个新的 `case class` 就可以了：\n\n比如我们在后期增加了一种叫 「团购券」 的优惠券，我们不需要修改原来定义的结构，直接：\n\n```scala\ncase class GroupCoupon (\n  id: Long,\n   baseInfo: BaseInfo,\n   `type`: String,\n   dealDetail: String\n)\n```\n\n并且在利用「模式匹配」的时候，我们可以像操作代数那样：\n\n```scala\ncoupon match {\n  case c: CashCoupon => ???       // 我们可以直接在匹配完成之后使用 coupon\n  case c: DiscountCoupon => ???\n  case c: GiftCoupon => ???\n  case c: GroupCoupon => ???\n}\n\n// 如果是我们用 ADT 改造前的数据结构，那模式匹配就会变成：\n\ncoupon.`type` match {\n  case Coupon.Type.CashType => ???      // 我们只能使用 coupon.`type`\n  case Coupon.Type.GiftType => ???\n  case Coupon.Type.DiscountType => ???\n  case Coupon.Type.GroupCoupon => ???\n}\n```\n\n通过本例，我们可以看到，利用 `ADT` 重新组织之后的数据结构减少了数据的冗余，并且在使用「模式匹配」的时候更加清晰，在功能上也更加强大。\n\n#### 场景二\n\n假设我们现在要实现一个「抽奖活动」的业务：\n\n1. 该抽奖活动有开始时间和结束时间，结束之后活动就不能参与了\n\n2. 该抽奖活动有一等奖、二等奖、三等奖以及不中奖\n\n3. 每种奖项都有一定的中奖概率，用户可能会中奖可能不会中奖\n\n根据上面的需求描述，我们可以很快地构建出如下结构：\n\n```scala\n//定义活动\ncase class Activity (\n  id: Long,\n  name: String,\n  startAt: DateTime,\n  endAt: DateTime,\n  firstPrize: Long,      //用奖品的id来关联不同奖项对应的奖品\n  secondPrize: Long,\n  thirdPrize: Long,\n  ...\n)\n\n//定义奖品\ncase class Pize (\n  id: Long,\n  rate: Float,\n  quantity: Int,\n  detail: String,\n  ...\n)\n\n//定义用户\ncase class User (\n  id: Long,\n  name: String,\n  sex: String,\n  phone: String,\n  ...\n)\n```\n定义好基本的结构之后，我们要去描述用户参加「抽奖活动」这一行为的「结果」，一般情况下， 我们会构造出如下结构：\n\n```scala\ncase class UserActivity (\n  id: Long,\n  userId: Long,\n  activityId: Long,\n  status: Int,                 \n  prizeType: Option[Long],   //奖品的类型，判断是几等奖\n  prize: Option[Long]        //奖品id\n)\n\nobject UserActivity {\n  object Status {\n    final val HasPrize = 1\n    final val NoPrize = 2\n    final val ActivityExpired = 0\n  }\n}\n```\n现在我们就利用这些结构来完成一些基本的需求，假设我们要根据用户参与「抽奖活动」的「结果」来渲染页面：\n\n分析：用户参与抽奖的结果有大概如下几种：\n\n1. 成功参与活动，并且中奖\n\n2. 成功参与活动，没有中奖\n\n3. 活动已经过期，用户不能参与活动\n\n那我们可能会这样去组织我们的逻辑：\n\n```scala\ndef f(ua: UserActivity) = ua.status match {\n  case UserActivity.Status.HasPrize => ???\n  case UserActivity.Status.NoPrize => ???\n  case UserActivity.Status.ActivityExpired => ???\n}\n```\n我们根据抽奖结果「状态」的不同而去渲染不同的页面，这样似乎能解决问题，但是，如果我们想要在「模式匹配」完成之后根据用户信息，奖品信息以及活动信息来渲染页面的话，就需要：\n\n```scala\ndef f(ua: UserActivity) = ua.status match {\n  case UserActivity.Status.HasPrize => {\n    //假设用户中奖了，我们需要显示用户的信息，活动信息以及奖品信息,则：\n    getUser(ua.userId)          //获取用户信息\n    getActivity(ua.activityId)  //获取活动信息\n    getPrize(ua.prize)          //获取奖品信息\n    ...\n  }\n  case UserActivity.Status.NoPrize => ???\n  case UserActivity.Status.ActivityExpired => ???\n}\n```\n\n我们在每一次模式匹配完成之后都要去做一大堆获取信息的工作，如果后期需要的信息量很多，那么这里的代码将显得十分臃肿。\n\n##### 利用 `ADT` 重新组织：\n\n通过上面分析，我们知道，用户参与活动的过程中会涉及到许多信息，那我们就利用 `ADT` 将这些信息全部构造在一起：\n\n```scala\ncase class UserActivity (\n  id: Long,\n  user: User,\n  activity: Activity,\n  prize: Option[Prize],\n  status: Int\n)\n```\n通过这样组织，我们的信息就非常完备了，在之前的「模式匹配」中，我们可以直接去用这些数据，而不用再次去获取。但是上面的结构还存在一些不足：\n\n1. 我们利用模式匹配的时候还是要根据活动的「状态」去匹配，参考「场景一」\n\n2. 如果后续业务变得复杂 `UserActivity` 中的字段可能会很多\n\n所以我们能否再将数据进一步抽象？\n\n分析：用户参加活动的结果无非就是我们上面列举的几个状态，那我们就将这些状态利用 `ADT` 再重新组织一下：\n\n```scala\nsealed trait Status {\n  val id: Long,\n  val detail: StatusDetail\n}\n\ncase calss StatusDetail {\n  user: User,\n  activity: Activity\n  prize: Option[Prize]\n}\n\ncase class HasPrize (\n  id: Long,\n  detail: StatusDetail\n) extends Status\n\ncase class NoPrize (\n  id: Long,\n  detail: StatusDetail\n) extends Status\n\ncase class ActivityExpired (\n  id: Long,\n  detail: StatusDetail\n) extends Status\n```\n\n通过上面的改造，用户参与活动的状态变得更加清晰，同时对外暴露的结构也变得更加简洁，在使用「模式匹配」的时候，我们就可以：\n\n```scala\ndef f(status: Status) = status match {\n  case HasPrize(id, detail) => ???        //可以直接使用status\n  case NoPrize(id, detail) => ???\n  case ActivityExpired(id, detail) => ???\n}\n```\n\n通过本例，我们可以发现，通过 `ADT` 可以将数据`高度抽像`，使得数据的「具体信息」变得简洁，同时「概括能力」变得更强，数据更加「完备」。\n\n## 延伸阅读\n\n[Algebraic data type](https://wiki.haskell.org/Algebraic_data_type)\n\n[The Algebra of Algebraic Data Types, Part 1](http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/)\n\n[The Algebra of Algebraic Data Types, Part 2](http://chris-taylor.github.io/blog/2013/02/11/the-algebra-of-algebraic-data-types-part-ii/)\n\n[The Algebra of Algebraic Data Types, Part 3](http://chris-taylor.github.io/blog/2013/02/13/the-algebra-of-algebraic-data-types-part-iii/)\n","slug":"2017-3-20-How-to-use-algebraic-data-type-in-development","published":1,"date":"2017-03-19T16:12:20.000Z","updated":"2017-03-21T02:07:17.000Z","_id":"cj0jhr2fv0000pxxfgh76kgk5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在用 <code>Scala</code> 做业务开发的时候，我们大都会用到 <code>case class</code> 以及「模式匹配」，本文将介绍如何利用 <code>case class</code> 模拟 <code>ADT</code> 并在日常开发中利用 <code>ADT</code> 良好地组织业务。</p>\n<h2 id=\"ADT（代数数据类型）\"><a href=\"#ADT（代数数据类型）\" class=\"headerlink\" title=\"ADT（代数数据类型）\"></a>ADT（代数数据类型）</h2><blockquote>\n<p>在计算机编程、特别是函数式编程与类型理论中，<code>ADT</code> 是一种 组合类型（<code>composite type</code>）。例如，一个类型由其它类型组合而成。两个常见的代数类型是 <code>product</code>（积）类型 (比如 <code>tuples</code> 和 <code>records</code> )和<code>sum</code>（和）类型，它也被称为 <code>tagged unions</code> 或 <code>variant type</code>。</p>\n</blockquote>\n<p>这里简单介绍一下常见的两种代数类型 <code>product</code>（积）类型和 <code>sum</code>（和）类型</p>\n<h3 id=\"计数（Counting）\"><a href=\"#计数（Counting）\" class=\"headerlink\" title=\"计数（Counting）\"></a>计数（Counting）</h3><p>在介绍两种常见代数类型之前我们先介绍一下 「计数」 的概念，方面理解后面所要介绍的内容。</p>\n<p>为了将某个类型与我们熟悉的数字代数相关联，我们可以计算该类型有多少种取值，例如 <code>Bool</code> 类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">data Bool = true | false</div></pre></td></tr></table></figure>\n<p>可以看到 <code>Bool</code> 类型有两种可能的取值，要么是 <code>false</code>, 要么是 <code>true</code>, 所以这里我们暂时将数字 <code>2</code> 与 <code>Bool</code> 类型相关联。</p>\n<p>如果 <code>Bool</code> 类型是 <code>2</code>，那么何种类型是 <code>1</code> 呢，在 <code>Scala</code> 中 <code>Unit</code> 类型只有一种取值：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scala&gt; <span class=\"keyword\">val</span> a = ()</div><div class=\"line\">a: <span class=\"type\">Unit</span> = ()</div></pre></td></tr></table></figure>\n<p>所以这里我们将数字 <code>1</code> 与 <code>Unit</code> 类型相关联。</p>\n<p>有了 「计数」 这个概念，接下来我们介绍常见的两种代数类型。</p>\n<h3 id=\"product\"><a href=\"#product\" class=\"headerlink\" title=\"product\"></a>product</h3><p><code>product</code> 可以理解为是一种 组合<code>（combination）</code>，可以通过我们熟悉的 <code>*</code>（乘法） 操作来产生，对应的类型为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">data Mul a b = Mul a b</div></pre></td></tr></table></figure>\n<p>也就是说， <code>a * b</code> 类型是同时持有 <code>a</code> 和 <code>b</code> 的容器。</p>\n<p>在 <code>Scala</code>中，<code>tuples</code>（元组）就是这样的，eg：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scala&gt; <span class=\"keyword\">val</span> b = (<span class=\"type\">Boolean</span>, <span class=\"type\">Boolean</span>)</div><div class=\"line\">b: (<span class=\"type\">Boolean</span>.<span class=\"keyword\">type</span>, <span class=\"type\">Boolean</span>.<span class=\"keyword\">type</span>) = (<span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">scala</span>.<span class=\"title\">Boolean</span>,<span class=\"title\">object</span> <span class=\"title\">scala</span>.<span class=\"title\">Boolean</span>)</span></div></pre></td></tr></table></figure>\n<p>我们定义的 「元组 <code>b</code>」 就是两个 <code>Boolean</code> 类型的组合，也就是说，「元组 <code>b</code>」 是同时拥有两个 <code>Boolean</code> 类型的容器，可以通过我们前面介绍的 「计数」 的概念来理解：</p>\n<p><code>Boolean</code> 类型有两种取值，当 <code>Boolean</code> 和 <code>Boolean</code> 通过 <code>*</code> 操作进行组合时：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2</span> * <span class=\"number\">2</span> = <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>所以我们定义的 「元组 <code>b</code>」 有四种可能的取值，我们利用 「模式匹配 来列举这四种取值：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">b <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"literal\">true</span>, <span class=\"literal\">true</span>) =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"literal\">true</span>, <span class=\"literal\">false</span>) =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"literal\">false</span>, <span class=\"literal\">true</span>) =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"literal\">false</span>, <span class=\"literal\">false</span>) =&gt; ???</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"sum\"><a href=\"#sum\" class=\"headerlink\" title=\"sum\"></a>sum</h3><p><code>sum</code> 可以理解为是一种 <code>alternation</code>（选择），可以通过我们熟悉的 <code>+ （加法）</code> 操作来产生，对应的类型为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">data Add a b = AddL a | AddR b</div></pre></td></tr></table></figure>\n<p><code>a + b</code> 是一个和类型，同时拥有 <code>a</code> 或者 <code>b</code>。</p>\n<p>注意这里是 a <code>或者</code> b，不同于上面介绍的 <code>*</code>。</p>\n<p>这里可能就会有疑惑了，为什么 <code>+</code>（加法） 是 <code>或者</code> 呢，我们依然通过前面介绍的 「计数」 的概念来理解：</p>\n<p>在 <code>Scala</code> 中 <code>Option</code> 就是一种 <code>sum</code> 类型，eg：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scala&gt; <span class=\"keyword\">val</span> c = <span class=\"type\">Option</span>(<span class=\"literal\">false</span>)</div><div class=\"line\">c: <span class=\"type\">Option</span>[<span class=\"type\">Boolean</span>] = <span class=\"type\">Some</span>(<span class=\"literal\">false</span>)</div></pre></td></tr></table></figure>\n<p><code>option[Boolean]</code> 其实是 <code>Boolean</code> 与 <code>None</code> 通过 <code>+</code> 操作得到的，分析：</p>\n<p><code>Boolean</code> 有两种取值，<code>None</code> 只有一种，那么：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2</span> + <span class=\"number\">1</span> = <span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>所以我们定义的 <code>c: Option[Boolean]</code> 有三种可能的取值，我们利用 「模式匹配」 来列举这三种取值：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">c <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(<span class=\"literal\">true</span>) =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(<span class=\"literal\">false</span>) =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">None</span> =&gt; ???</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以看到，<code>Option[Boolean]</code> 类型的取值要么是 <code>Boolean</code> 类型，要么是 <code>None</code> 类型，这两种类型是<code>不能同时</code>存在的，这一点与 <code>product</code> 类型不同。并且 <code>sum</code> 类型是一个「闭环」，类型的定义已经包含了所有可能性，绝无可能会出现非法状态。</p>\n<h2 id=\"在业务中使用-ADT\"><a href=\"#在业务中使用-ADT\" class=\"headerlink\" title=\"在业务中使用 ADT\"></a>在业务中使用 ADT</h2><p>我们在利用 <code>Scala</code> 的 <code>case class</code> 组织业务的时候其实就已经用到了 <code>ADT</code>，eg：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Tree</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>(<span class=\"params\">left: <span class=\"type\">Tree</span>, right: <span class=\"type\">Tree</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Tree</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leaf</span>[<span class=\"type\">A</span>](<span class=\"params\">value: <span class=\"type\">A</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Tree</span></span></div></pre></td></tr></table></figure>\n<p>在上面 「树」 结构的定义中，<code>Node</code>、<code>Leaf</code> 通过继承 <code>Tree</code>，通过这种继承关系而得到的类型就是 <code>ADT</code> 中的 <code>sum</code>，而构造 <code>Node</code> 和 <code>Leaf</code> 的时候则是 <code>ADT</code> 中的 <code>product</code>。大家可以通过我们前面所说的 「计数」的概念来验证。</p>\n<p>上面的代码中出现了一个关键字 <code>sealed</code>，我们先介绍一下这个关键字。</p>\n<h3 id=\"Sealed\"><a href=\"#Sealed\" class=\"headerlink\" title=\"Sealed\"></a>Sealed</h3><p>前面我们说过 <code>sum</code> 类型是一个 「闭环」，当我们将「样例类」的「超类」声明为 <code>sealed</code> 后，该超类就变成了一个 「密封类」，「密封类」的子类都必须在与该密封类相同的文件中定义，从而达到了上面说的「闭环」的效果。</p>\n<p>比如我们现在要为上面的 <code>Tree</code> 添加一个 <code>EmptyLeaf</code>：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">EmptyLeaf</span> <span class=\"keyword\">extends</span> <span class=\"title\">Tree</span></span></div></pre></td></tr></table></figure>\n<p>那这段被添加的代码必须放在我们上面声明 <code>Tree</code> 的那个文件里面，否则会报错。</p>\n<p>另外，<code>sealed</code> 关键字也可以让「编译器」检查「模式」语句的完整性,eg：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Answer</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Yes</span> <span class=\"keyword\">extends</span> <span class=\"title\">Answer</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">No</span> <span class=\"keyword\">extends</span> <span class=\"title\">Answer</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> x: <span class=\"type\">Answer</span> = <span class=\"type\">Yes</span></div><div class=\"line\"></div><div class=\"line\">x <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Yes</span> =&gt; println(<span class=\"string\">\"Yes\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;console&gt;: warning: <span class=\"keyword\">match</span> may not be exhaustive.</div><div class=\"line\"><span class=\"type\">It</span> would fail on the following input: <span class=\"type\">No</span></div><div class=\"line\">       x <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">       ^</div></pre></td></tr></table></figure>\n<p>「编译器」会在编译阶段提前给我们一个可能会出错的「警告（warning）」</p>\n<h3 id=\"利用-ADT-来良好地组织业务\"><a href=\"#利用-ADT-来良好地组织业务\" class=\"headerlink\" title=\"利用 ADT 来良好地组织业务\"></a>利用 ADT 来良好地组织业务</h3><p>前面说了这么多，终于进入正题了，接下来我们以几个例子来说明如何在开发中合理地利用 <code>ADT</code>。</p>\n<h4 id=\"场景一\"><a href=\"#场景一\" class=\"headerlink\" title=\"场景一\"></a>场景一</h4><p>现在我们要开发一个与「优惠券」有关的业务，一般情况下，我们可能会这么去定义优惠券的结构：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coupon</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  baseInfo: <span class=\"type\">BaseInfo</span>,</div><div class=\"line\">  `type`: <span class=\"type\">String</span>,</div><div class=\"line\">  ...</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Coupon</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//优惠券类型</span></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Type</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 现金券</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> <span class=\"type\">CashType</span>       = <span class=\"string\">\"CASH\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//折扣券</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> <span class=\"type\">DiscountType</span>   = <span class=\"string\">\"DISCOUNT\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 礼品券</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> <span class=\"type\">GiftType</span>       = <span class=\"string\">\"GIFT\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>分析：这样去定义 「优惠券」 的结构也能解决问题，但是当 「优惠券」 类型增多的时候，会出现很多的冗余数据。比如说，不同的优惠类型，会有不同优惠信息，这些优惠信息在结构中对应的字段也会有所不同：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coupon</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  baseInfo: <span class=\"type\">BaseInfo</span>,</div><div class=\"line\">  `type`: <span class=\"type\">String</span>,</div><div class=\"line\"></div><div class=\"line\">  // 仅在优惠券类型是代金券的时候使用</div><div class=\"line\"></div><div class=\"line\">  leastCost: <span class=\"type\">Option</span>[<span class=\"type\">Long</span>],</div><div class=\"line\">  reduceCost: <span class=\"type\">Option</span>[<span class=\"type\">Long</span>],</div><div class=\"line\"></div><div class=\"line\">  //仅在优惠券类型是折扣券的时候使用</div><div class=\"line\"></div><div class=\"line\">  discount: <span class=\"type\">Option</span>[<span class=\"type\">Int</span>],</div><div class=\"line\"></div><div class=\"line\">  //仅在优惠券是礼品券的时候使用</div><div class=\"line\"></div><div class=\"line\">  gift: <span class=\"type\">Option</span>[<span class=\"type\">String</span>]</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>从上定义的结构我们可以看到，当我们使用 「礼品券」 的时候，有三个字段（<code>leastCost</code>、<code>reduceCost</code>、<code>discount</code>）的值是 <code>None</code>，因为我们根本就用不到。由此可以看出，当 「优惠券」 的结构比较复杂的时候，可能会产生大量的冗余字段，从而使我们的代码看上去非常臃肿，同时增加了我们的开发难度。</p>\n<h5 id=\"利用-ADT-重新组织：\"><a href=\"#利用-ADT-重新组织：\" class=\"headerlink\" title=\"利用 ADT 重新组织：\"></a>利用 <code>ADT</code> 重新组织：</h5><p>分析：通过上面的讨论，我们知道 「优惠券」 可能有多种类型，所以，我们利用 <code>ADT</code> 将不同的「优惠券」分离开来：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将每一种优惠券公共的部分抽离出来</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Coupon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> id: <span class=\"type\">Long</span></div><div class=\"line\">  <span class=\"keyword\">val</span> baseInfo: <span class=\"type\">BaseInfo</span></div><div class=\"line\">  <span class=\"keyword\">val</span> `<span class=\"class\"><span class=\"keyword\">type</span>`</span>: <span class=\"type\">String</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashCoupon</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  baseInfo: <span class=\"type\">BaseInfo</span>,</div><div class=\"line\">  `type`: <span class=\"type\">String</span> = <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">CashType</span>,</div><div class=\"line\">  leastCost: <span class=\"type\">Long</span>,</div><div class=\"line\">  reduceCost: <span class=\"type\">Long</span>,</div><div class=\"line\">  ...</div><div class=\"line\">) <span class=\"keyword\">extends</span> <span class=\"title\">Coupon</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DiscountCoupon</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  baseInfo: <span class=\"type\">BaseInfo</span>,</div><div class=\"line\">  `type`: <span class=\"type\">String</span> = <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">DiscountType</span>,</div><div class=\"line\">  discount: <span class=\"type\">Int</span>,</div><div class=\"line\">  ...</div><div class=\"line\">) <span class=\"keyword\">extends</span> <span class=\"title\">Coupon</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GiftCoupon</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  baseInfo: <span class=\"type\">BaseInfo</span>,</div><div class=\"line\">  `type`: <span class=\"type\">String</span> = <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">GiftType</span>,</div><div class=\"line\">  gift: <span class=\"type\">String</span>,</div><div class=\"line\">  ...</div><div class=\"line\">) <span class=\"keyword\">extends</span> <span class=\"title\">Coupon</span></div></pre></td></tr></table></figure>\n<p>同过合理地利用 <code>ADT</code> 我们使每一种「优惠券」的结构更加清晰，同时也减少了字段的冗余。并且，如果在业务后期我们还要增加别的 「优惠券」类型，我们不用修改原来的结构，只需要再重新创建一个新的 <code>case class</code> 就可以了：</p>\n<p>比如我们在后期增加了一种叫 「团购券」 的优惠券，我们不需要修改原来定义的结构，直接：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupCoupon</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">   baseInfo: <span class=\"type\">BaseInfo</span>,</div><div class=\"line\">   `type`: <span class=\"type\">String</span>,</div><div class=\"line\">   dealDetail: <span class=\"type\">String</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>并且在利用「模式匹配」的时候，我们可以像操作代数那样：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">coupon <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> c: <span class=\"type\">CashCoupon</span> =&gt; ???       <span class=\"comment\">// 我们可以直接在匹配完成之后使用 coupon</span></div><div class=\"line\">  <span class=\"keyword\">case</span> c: <span class=\"type\">DiscountCoupon</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> c: <span class=\"type\">GiftCoupon</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> c: <span class=\"type\">GroupCoupon</span> =&gt; ???</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果是我们用 ADT 改造前的数据结构，那模式匹配就会变成：</span></div><div class=\"line\"></div><div class=\"line\">coupon.`<span class=\"class\"><span class=\"keyword\">type</span>` <span class=\"title\">match</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">CashType</span> =&gt; ???      <span class=\"comment\">// 我们只能使用 coupon.`type`</span></div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">GiftType</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">DiscountType</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">GroupCoupon</span> =&gt; ???</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过本例，我们可以看到，利用 <code>ADT</code> 重新组织之后的数据结构减少了数据的冗余，并且在使用「模式匹配」的时候更加清晰，在功能上也更加强大。</p>\n<h4 id=\"场景二\"><a href=\"#场景二\" class=\"headerlink\" title=\"场景二\"></a>场景二</h4><p>假设我们现在要实现一个「抽奖活动」的业务：</p>\n<ol>\n<li><p>该抽奖活动有开始时间和结束时间，结束之后活动就不能参与了</p>\n</li>\n<li><p>该抽奖活动有一等奖、二等奖、三等奖以及不中奖</p>\n</li>\n<li><p>每种奖项都有一定的中奖概率，用户可能会中奖可能不会中奖</p>\n</li>\n</ol>\n<p>根据上面的需求描述，我们可以很快地构建出如下结构：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义活动</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activity</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  name: <span class=\"type\">String</span>,</div><div class=\"line\">  startAt: <span class=\"type\">DateTime</span>,</div><div class=\"line\">  endAt: <span class=\"type\">DateTime</span>,</div><div class=\"line\">  firstPrize: <span class=\"type\">Long</span>,      //用奖品的id来关联不同奖项对应的奖品</div><div class=\"line\">  secondPrize: <span class=\"type\">Long</span>,</div><div class=\"line\">  thirdPrize: <span class=\"type\">Long</span>,</div><div class=\"line\">  ...</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义奖品</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pize</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  rate: <span class=\"type\">Float</span>,</div><div class=\"line\">  quantity: <span class=\"type\">Int</span>,</div><div class=\"line\">  detail: <span class=\"type\">String</span>,</div><div class=\"line\">  ...</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义用户</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  name: <span class=\"type\">String</span>,</div><div class=\"line\">  sex: <span class=\"type\">String</span>,</div><div class=\"line\">  phone: <span class=\"type\">String</span>,</div><div class=\"line\">  ...</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>定义好基本的结构之后，我们要去描述用户参加「抽奖活动」这一行为的「结果」，一般情况下， 我们会构造出如下结构：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserActivity</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  userId: <span class=\"type\">Long</span>,</div><div class=\"line\">  activityId: <span class=\"type\">Long</span>,</div><div class=\"line\">  status: <span class=\"type\">Int</span>,                 </div><div class=\"line\">  prizeType: <span class=\"type\">Option</span>[<span class=\"type\">Long</span>],   //奖品的类型，判断是几等奖</div><div class=\"line\">  prize: <span class=\"type\">Option</span>[<span class=\"type\">Long</span>]        //奖品id</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">UserActivity</span> </span>&#123;</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Status</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> <span class=\"type\">HasPrize</span> = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> <span class=\"type\">NoPrize</span> = <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> <span class=\"type\">ActivityExpired</span> = <span class=\"number\">0</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在我们就利用这些结构来完成一些基本的需求，假设我们要根据用户参与「抽奖活动」的「结果」来渲染页面：</p>\n<p>分析：用户参与抽奖的结果有大概如下几种：</p>\n<ol>\n<li><p>成功参与活动，并且中奖</p>\n</li>\n<li><p>成功参与活动，没有中奖</p>\n</li>\n<li><p>活动已经过期，用户不能参与活动</p>\n</li>\n</ol>\n<p>那我们可能会这样去组织我们的逻辑：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span></span>(ua: <span class=\"type\">UserActivity</span>) = ua.status <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UserActivity</span>.<span class=\"type\">Status</span>.<span class=\"type\">HasPrize</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UserActivity</span>.<span class=\"type\">Status</span>.<span class=\"type\">NoPrize</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UserActivity</span>.<span class=\"type\">Status</span>.<span class=\"type\">ActivityExpired</span> =&gt; ???</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们根据抽奖结果「状态」的不同而去渲染不同的页面，这样似乎能解决问题，但是，如果我们想要在「模式匹配」完成之后根据用户信息，奖品信息以及活动信息来渲染页面的话，就需要：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span></span>(ua: <span class=\"type\">UserActivity</span>) = ua.status <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UserActivity</span>.<span class=\"type\">Status</span>.<span class=\"type\">HasPrize</span> =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">//假设用户中奖了，我们需要显示用户的信息，活动信息以及奖品信息,则：</span></div><div class=\"line\">    getUser(ua.userId)          <span class=\"comment\">//获取用户信息</span></div><div class=\"line\">    getActivity(ua.activityId)  <span class=\"comment\">//获取活动信息</span></div><div class=\"line\">    getPrize(ua.prize)          <span class=\"comment\">//获取奖品信息</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UserActivity</span>.<span class=\"type\">Status</span>.<span class=\"type\">NoPrize</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UserActivity</span>.<span class=\"type\">Status</span>.<span class=\"type\">ActivityExpired</span> =&gt; ???</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们在每一次模式匹配完成之后都要去做一大堆获取信息的工作，如果后期需要的信息量很多，那么这里的代码将显得十分臃肿。</p>\n<h5 id=\"利用-ADT-重新组织：-1\"><a href=\"#利用-ADT-重新组织：-1\" class=\"headerlink\" title=\"利用 ADT 重新组织：\"></a>利用 <code>ADT</code> 重新组织：</h5><p>通过上面分析，我们知道，用户参与活动的过程中会涉及到许多信息，那我们就利用 <code>ADT</code> 将这些信息全部构造在一起：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserActivity</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  user: <span class=\"type\">User</span>,</div><div class=\"line\">  activity: <span class=\"type\">Activity</span>,</div><div class=\"line\">  prize: <span class=\"type\">Option</span>[<span class=\"type\">Prize</span>],</div><div class=\"line\">  status: <span class=\"type\">Int</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>通过这样组织，我们的信息就非常完备了，在之前的「模式匹配」中，我们可以直接去用这些数据，而不用再次去获取。但是上面的结构还存在一些不足：</p>\n<ol>\n<li><p>我们利用模式匹配的时候还是要根据活动的「状态」去匹配，参考「场景一」</p>\n</li>\n<li><p>如果后续业务变得复杂 <code>UserActivity</code> 中的字段可能会很多</p>\n</li>\n</ol>\n<p>所以我们能否再将数据进一步抽象？</p>\n<p>分析：用户参加活动的结果无非就是我们上面列举的几个状态，那我们就将这些状态利用 <code>ADT</code> 再重新组织一下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Status</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> id: <span class=\"type\">Long</span>,</div><div class=\"line\">  <span class=\"keyword\">val</span> detail: <span class=\"type\">StatusDetail</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> calss <span class=\"type\">StatusDetail</span> &#123;</div><div class=\"line\">  user: <span class=\"type\">User</span>,</div><div class=\"line\">  activity: <span class=\"type\">Activity</span></div><div class=\"line\">  prize: <span class=\"type\">Option</span>[<span class=\"type\">Prize</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HasPrize</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  detail: <span class=\"type\">StatusDetail</span></div><div class=\"line\">) <span class=\"keyword\">extends</span> <span class=\"title\">Status</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoPrize</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  detail: <span class=\"type\">StatusDetail</span></div><div class=\"line\">) <span class=\"keyword\">extends</span> <span class=\"title\">Status</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityExpired</span> (<span class=\"params\"></span></span></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  detail: <span class=\"type\">StatusDetail</span></div><div class=\"line\">) <span class=\"keyword\">extends</span> <span class=\"title\">Status</span></div></pre></td></tr></table></figure>\n<p>通过上面的改造，用户参与活动的状态变得更加清晰，同时对外暴露的结构也变得更加简洁，在使用「模式匹配」的时候，我们就可以：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span></span>(status: <span class=\"type\">Status</span>) = status <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">HasPrize</span>(id, detail) =&gt; ???        <span class=\"comment\">//可以直接使用status</span></div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">NoPrize</span>(id, detail) =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">ActivityExpired</span>(id, detail) =&gt; ???</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过本例，我们可以发现，通过 <code>ADT</code> 可以将数据<code>高度抽像</code>，使得数据的「具体信息」变得简洁，同时「概括能力」变得更强，数据更加「完备」。</p>\n<h2 id=\"延伸阅读\"><a href=\"#延伸阅读\" class=\"headerlink\" title=\"延伸阅读\"></a>延伸阅读</h2><p><a href=\"https://wiki.haskell.org/Algebraic_data_type\" target=\"_blank\" rel=\"external\">Algebraic data type</a></p>\n<p><a href=\"http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/\" target=\"_blank\" rel=\"external\">The Algebra of Algebraic Data Types, Part 1</a></p>\n<p><a href=\"http://chris-taylor.github.io/blog/2013/02/11/the-algebra-of-algebraic-data-types-part-ii/\" target=\"_blank\" rel=\"external\">The Algebra of Algebraic Data Types, Part 2</a></p>\n<p><a href=\"http://chris-taylor.github.io/blog/2013/02/13/the-algebra-of-algebraic-data-types-part-iii/\" target=\"_blank\" rel=\"external\">The Algebra of Algebraic Data Types, Part 3</a></p>\n","excerpt":"","more":"<p>在用 <code>Scala</code> 做业务开发的时候，我们大都会用到 <code>case class</code> 以及「模式匹配」，本文将介绍如何利用 <code>case class</code> 模拟 <code>ADT</code> 并在日常开发中利用 <code>ADT</code> 良好地组织业务。</p>\n<h2 id=\"ADT（代数数据类型）\"><a href=\"#ADT（代数数据类型）\" class=\"headerlink\" title=\"ADT（代数数据类型）\"></a>ADT（代数数据类型）</h2><blockquote>\n<p>在计算机编程、特别是函数式编程与类型理论中，<code>ADT</code> 是一种 组合类型（<code>composite type</code>）。例如，一个类型由其它类型组合而成。两个常见的代数类型是 <code>product</code>（积）类型 (比如 <code>tuples</code> 和 <code>records</code> )和<code>sum</code>（和）类型，它也被称为 <code>tagged unions</code> 或 <code>variant type</code>。</p>\n</blockquote>\n<p>这里简单介绍一下常见的两种代数类型 <code>product</code>（积）类型和 <code>sum</code>（和）类型</p>\n<h3 id=\"计数（Counting）\"><a href=\"#计数（Counting）\" class=\"headerlink\" title=\"计数（Counting）\"></a>计数（Counting）</h3><p>在介绍两种常见代数类型之前我们先介绍一下 「计数」 的概念，方面理解后面所要介绍的内容。</p>\n<p>为了将某个类型与我们熟悉的数字代数相关联，我们可以计算该类型有多少种取值，例如 <code>Bool</code> 类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">data Bool = true | false</div></pre></td></tr></table></figure>\n<p>可以看到 <code>Bool</code> 类型有两种可能的取值，要么是 <code>false</code>, 要么是 <code>true</code>, 所以这里我们暂时将数字 <code>2</code> 与 <code>Bool</code> 类型相关联。</p>\n<p>如果 <code>Bool</code> 类型是 <code>2</code>，那么何种类型是 <code>1</code> 呢，在 <code>Scala</code> 中 <code>Unit</code> 类型只有一种取值：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scala&gt; <span class=\"keyword\">val</span> a = ()</div><div class=\"line\">a: <span class=\"type\">Unit</span> = ()</div></pre></td></tr></table></figure>\n<p>所以这里我们将数字 <code>1</code> 与 <code>Unit</code> 类型相关联。</p>\n<p>有了 「计数」 这个概念，接下来我们介绍常见的两种代数类型。</p>\n<h3 id=\"product\"><a href=\"#product\" class=\"headerlink\" title=\"product\"></a>product</h3><p><code>product</code> 可以理解为是一种 组合<code>（combination）</code>，可以通过我们熟悉的 <code>*</code>（乘法） 操作来产生，对应的类型为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">data Mul a b = Mul a b</div></pre></td></tr></table></figure>\n<p>也就是说， <code>a * b</code> 类型是同时持有 <code>a</code> 和 <code>b</code> 的容器。</p>\n<p>在 <code>Scala</code>中，<code>tuples</code>（元组）就是这样的，eg：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scala&gt; <span class=\"keyword\">val</span> b = (<span class=\"type\">Boolean</span>, <span class=\"type\">Boolean</span>)</div><div class=\"line\">b: (<span class=\"type\">Boolean</span>.<span class=\"keyword\">type</span>, <span class=\"type\">Boolean</span>.<span class=\"keyword\">type</span>) = (<span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">scala</span>.<span class=\"title\">Boolean</span>,<span class=\"title\">object</span> <span class=\"title\">scala</span>.<span class=\"title\">Boolean</span>)</span></div></pre></td></tr></table></figure>\n<p>我们定义的 「元组 <code>b</code>」 就是两个 <code>Boolean</code> 类型的组合，也就是说，「元组 <code>b</code>」 是同时拥有两个 <code>Boolean</code> 类型的容器，可以通过我们前面介绍的 「计数」 的概念来理解：</p>\n<p><code>Boolean</code> 类型有两种取值，当 <code>Boolean</code> 和 <code>Boolean</code> 通过 <code>*</code> 操作进行组合时：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2</span> * <span class=\"number\">2</span> = <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>所以我们定义的 「元组 <code>b</code>」 有四种可能的取值，我们利用 「模式匹配 来列举这四种取值：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">b <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"literal\">true</span>, <span class=\"literal\">true</span>) =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"literal\">true</span>, <span class=\"literal\">false</span>) =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"literal\">false</span>, <span class=\"literal\">true</span>) =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> (<span class=\"literal\">false</span>, <span class=\"literal\">false</span>) =&gt; ???</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"sum\"><a href=\"#sum\" class=\"headerlink\" title=\"sum\"></a>sum</h3><p><code>sum</code> 可以理解为是一种 <code>alternation</code>（选择），可以通过我们熟悉的 <code>+ （加法）</code> 操作来产生，对应的类型为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">data Add a b = AddL a | AddR b</div></pre></td></tr></table></figure>\n<p><code>a + b</code> 是一个和类型，同时拥有 <code>a</code> 或者 <code>b</code>。</p>\n<p>注意这里是 a <code>或者</code> b，不同于上面介绍的 <code>*</code>。</p>\n<p>这里可能就会有疑惑了，为什么 <code>+</code>（加法） 是 <code>或者</code> 呢，我们依然通过前面介绍的 「计数」 的概念来理解：</p>\n<p>在 <code>Scala</code> 中 <code>Option</code> 就是一种 <code>sum</code> 类型，eg：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scala&gt; <span class=\"keyword\">val</span> c = <span class=\"type\">Option</span>(<span class=\"literal\">false</span>)</div><div class=\"line\">c: <span class=\"type\">Option</span>[<span class=\"type\">Boolean</span>] = <span class=\"type\">Some</span>(<span class=\"literal\">false</span>)</div></pre></td></tr></table></figure>\n<p><code>option[Boolean]</code> 其实是 <code>Boolean</code> 与 <code>None</code> 通过 <code>+</code> 操作得到的，分析：</p>\n<p><code>Boolean</code> 有两种取值，<code>None</code> 只有一种，那么：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">2</span> + <span class=\"number\">1</span> = <span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>所以我们定义的 <code>c: Option[Boolean]</code> 有三种可能的取值，我们利用 「模式匹配」 来列举这三种取值：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">c <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(<span class=\"literal\">true</span>) =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(<span class=\"literal\">false</span>) =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">None</span> =&gt; ???</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以看到，<code>Option[Boolean]</code> 类型的取值要么是 <code>Boolean</code> 类型，要么是 <code>None</code> 类型，这两种类型是<code>不能同时</code>存在的，这一点与 <code>product</code> 类型不同。并且 <code>sum</code> 类型是一个「闭环」，类型的定义已经包含了所有可能性，绝无可能会出现非法状态。</p>\n<h2 id=\"在业务中使用-ADT\"><a href=\"#在业务中使用-ADT\" class=\"headerlink\" title=\"在业务中使用 ADT\"></a>在业务中使用 ADT</h2><p>我们在利用 <code>Scala</code> 的 <code>case class</code> 组织业务的时候其实就已经用到了 <code>ADT</code>，eg：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Tree</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>(<span class=\"params\">left: <span class=\"type\">Tree</span>, right: <span class=\"type\">Tree</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Tree</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leaf</span>[<span class=\"type\">A</span>](<span class=\"params\">value: <span class=\"type\">A</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Tree</span></span></div></pre></td></tr></table></figure>\n<p>在上面 「树」 结构的定义中，<code>Node</code>、<code>Leaf</code> 通过继承 <code>Tree</code>，通过这种继承关系而得到的类型就是 <code>ADT</code> 中的 <code>sum</code>，而构造 <code>Node</code> 和 <code>Leaf</code> 的时候则是 <code>ADT</code> 中的 <code>product</code>。大家可以通过我们前面所说的 「计数」的概念来验证。</p>\n<p>上面的代码中出现了一个关键字 <code>sealed</code>，我们先介绍一下这个关键字。</p>\n<h3 id=\"Sealed\"><a href=\"#Sealed\" class=\"headerlink\" title=\"Sealed\"></a>Sealed</h3><p>前面我们说过 <code>sum</code> 类型是一个 「闭环」，当我们将「样例类」的「超类」声明为 <code>sealed</code> 后，该超类就变成了一个 「密封类」，「密封类」的子类都必须在与该密封类相同的文件中定义，从而达到了上面说的「闭环」的效果。</p>\n<p>比如我们现在要为上面的 <code>Tree</code> 添加一个 <code>EmptyLeaf</code>：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">EmptyLeaf</span> <span class=\"keyword\">extends</span> <span class=\"title\">Tree</span></span></div></pre></td></tr></table></figure>\n<p>那这段被添加的代码必须放在我们上面声明 <code>Tree</code> 的那个文件里面，否则会报错。</p>\n<p>另外，<code>sealed</code> 关键字也可以让「编译器」检查「模式」语句的完整性,eg：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Answer</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Yes</span> <span class=\"keyword\">extends</span> <span class=\"title\">Answer</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">No</span> <span class=\"keyword\">extends</span> <span class=\"title\">Answer</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> x: <span class=\"type\">Answer</span> = <span class=\"type\">Yes</span></div><div class=\"line\"></div><div class=\"line\">x <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Yes</span> =&gt; println(<span class=\"string\">\"Yes\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;console&gt;: warning: <span class=\"keyword\">match</span> may not be exhaustive.</div><div class=\"line\"><span class=\"type\">It</span> would fail on the following input: <span class=\"type\">No</span></div><div class=\"line\">       x <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">       ^</div></pre></td></tr></table></figure>\n<p>「编译器」会在编译阶段提前给我们一个可能会出错的「警告（warning）」</p>\n<h3 id=\"利用-ADT-来良好地组织业务\"><a href=\"#利用-ADT-来良好地组织业务\" class=\"headerlink\" title=\"利用 ADT 来良好地组织业务\"></a>利用 ADT 来良好地组织业务</h3><p>前面说了这么多，终于进入正题了，接下来我们以几个例子来说明如何在开发中合理地利用 <code>ADT</code>。</p>\n<h4 id=\"场景一\"><a href=\"#场景一\" class=\"headerlink\" title=\"场景一\"></a>场景一</h4><p>现在我们要开发一个与「优惠券」有关的业务，一般情况下，我们可能会这么去定义优惠券的结构：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coupon</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  baseInfo: <span class=\"type\">BaseInfo</span>,</div><div class=\"line\">  `type`: <span class=\"type\">String</span>,</div><div class=\"line\">  ...</div><div class=\"line\"></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Coupon</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//优惠券类型</span></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Type</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 现金券</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> <span class=\"type\">CashType</span>       = <span class=\"string\">\"CASH\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//折扣券</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> <span class=\"type\">DiscountType</span>   = <span class=\"string\">\"DISCOUNT\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 礼品券</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> <span class=\"type\">GiftType</span>       = <span class=\"string\">\"GIFT\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>分析：这样去定义 「优惠券」 的结构也能解决问题，但是当 「优惠券」 类型增多的时候，会出现很多的冗余数据。比如说，不同的优惠类型，会有不同优惠信息，这些优惠信息在结构中对应的字段也会有所不同：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coupon</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  baseInfo: <span class=\"type\">BaseInfo</span>,</div><div class=\"line\">  `type`: <span class=\"type\">String</span>,</div><div class=\"line\"></div><div class=\"line\">  // 仅在优惠券类型是代金券的时候使用</div><div class=\"line\"></div><div class=\"line\">  leastCost: <span class=\"type\">Option</span>[<span class=\"type\">Long</span>],</div><div class=\"line\">  reduceCost: <span class=\"type\">Option</span>[<span class=\"type\">Long</span>],</div><div class=\"line\"></div><div class=\"line\">  //仅在优惠券类型是折扣券的时候使用</div><div class=\"line\"></div><div class=\"line\">  discount: <span class=\"type\">Option</span>[<span class=\"type\">Int</span>],</div><div class=\"line\"></div><div class=\"line\">  //仅在优惠券是礼品券的时候使用</div><div class=\"line\"></div><div class=\"line\">  gift: <span class=\"type\">Option</span>[<span class=\"type\">String</span>]</div><div class=\"line\"></span>)</span></div></pre></td></tr></table></figure>\n<p>从上定义的结构我们可以看到，当我们使用 「礼品券」 的时候，有三个字段（<code>leastCost</code>、<code>reduceCost</code>、<code>discount</code>）的值是 <code>None</code>，因为我们根本就用不到。由此可以看出，当 「优惠券」 的结构比较复杂的时候，可能会产生大量的冗余字段，从而使我们的代码看上去非常臃肿，同时增加了我们的开发难度。</p>\n<h5 id=\"利用-ADT-重新组织：\"><a href=\"#利用-ADT-重新组织：\" class=\"headerlink\" title=\"利用 ADT 重新组织：\"></a>利用 <code>ADT</code> 重新组织：</h5><p>分析：通过上面的讨论，我们知道 「优惠券」 可能有多种类型，所以，我们利用 <code>ADT</code> 将不同的「优惠券」分离开来：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将每一种优惠券公共的部分抽离出来</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Coupon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> id: <span class=\"type\">Long</span></div><div class=\"line\">  <span class=\"keyword\">val</span> baseInfo: <span class=\"type\">BaseInfo</span></div><div class=\"line\">  <span class=\"keyword\">val</span> `<span class=\"class\"><span class=\"keyword\">type</span>`</span>: <span class=\"type\">String</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashCoupon</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  baseInfo: <span class=\"type\">BaseInfo</span>,</div><div class=\"line\">  `type`: <span class=\"type\">String</span> = <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">CashType</span>,</div><div class=\"line\">  leastCost: <span class=\"type\">Long</span>,</div><div class=\"line\">  reduceCost: <span class=\"type\">Long</span>,</div><div class=\"line\">  ...</div><div class=\"line\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Coupon</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DiscountCoupon</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  baseInfo: <span class=\"type\">BaseInfo</span>,</div><div class=\"line\">  `type`: <span class=\"type\">String</span> = <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">DiscountType</span>,</div><div class=\"line\">  discount: <span class=\"type\">Int</span>,</div><div class=\"line\">  ...</div><div class=\"line\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Coupon</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GiftCoupon</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  baseInfo: <span class=\"type\">BaseInfo</span>,</div><div class=\"line\">  `type`: <span class=\"type\">String</span> = <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">GiftType</span>,</div><div class=\"line\">  gift: <span class=\"type\">String</span>,</div><div class=\"line\">  ...</div><div class=\"line\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Coupon</span></span></div></pre></td></tr></table></figure>\n<p>同过合理地利用 <code>ADT</code> 我们使每一种「优惠券」的结构更加清晰，同时也减少了字段的冗余。并且，如果在业务后期我们还要增加别的 「优惠券」类型，我们不用修改原来的结构，只需要再重新创建一个新的 <code>case class</code> 就可以了：</p>\n<p>比如我们在后期增加了一种叫 「团购券」 的优惠券，我们不需要修改原来定义的结构，直接：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupCoupon</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">   baseInfo: <span class=\"type\">BaseInfo</span>,</div><div class=\"line\">   `type`: <span class=\"type\">String</span>,</div><div class=\"line\">   dealDetail: <span class=\"type\">String</span></div><div class=\"line\"></span>)</span></div></pre></td></tr></table></figure>\n<p>并且在利用「模式匹配」的时候，我们可以像操作代数那样：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">coupon <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> c: <span class=\"type\">CashCoupon</span> =&gt; ???       <span class=\"comment\">// 我们可以直接在匹配完成之后使用 coupon</span></div><div class=\"line\">  <span class=\"keyword\">case</span> c: <span class=\"type\">DiscountCoupon</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> c: <span class=\"type\">GiftCoupon</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> c: <span class=\"type\">GroupCoupon</span> =&gt; ???</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果是我们用 ADT 改造前的数据结构，那模式匹配就会变成：</span></div><div class=\"line\"></div><div class=\"line\">coupon.`<span class=\"class\"><span class=\"keyword\">type</span>` <span class=\"title\">match</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">CashType</span> =&gt; ???      <span class=\"comment\">// 我们只能使用 coupon.`type`</span></div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">GiftType</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">DiscountType</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Coupon</span>.<span class=\"type\">Type</span>.<span class=\"type\">GroupCoupon</span> =&gt; ???</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过本例，我们可以看到，利用 <code>ADT</code> 重新组织之后的数据结构减少了数据的冗余，并且在使用「模式匹配」的时候更加清晰，在功能上也更加强大。</p>\n<h4 id=\"场景二\"><a href=\"#场景二\" class=\"headerlink\" title=\"场景二\"></a>场景二</h4><p>假设我们现在要实现一个「抽奖活动」的业务：</p>\n<ol>\n<li><p>该抽奖活动有开始时间和结束时间，结束之后活动就不能参与了</p>\n</li>\n<li><p>该抽奖活动有一等奖、二等奖、三等奖以及不中奖</p>\n</li>\n<li><p>每种奖项都有一定的中奖概率，用户可能会中奖可能不会中奖</p>\n</li>\n</ol>\n<p>根据上面的需求描述，我们可以很快地构建出如下结构：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义活动</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Activity</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  name: <span class=\"type\">String</span>,</div><div class=\"line\">  startAt: <span class=\"type\">DateTime</span>,</div><div class=\"line\">  endAt: <span class=\"type\">DateTime</span>,</div><div class=\"line\">  firstPrize: <span class=\"type\">Long</span>,      //用奖品的id来关联不同奖项对应的奖品</div><div class=\"line\">  secondPrize: <span class=\"type\">Long</span>,</div><div class=\"line\">  thirdPrize: <span class=\"type\">Long</span>,</div><div class=\"line\">  ...</div><div class=\"line\"></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义奖品</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pize</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  rate: <span class=\"type\">Float</span>,</div><div class=\"line\">  quantity: <span class=\"type\">Int</span>,</div><div class=\"line\">  detail: <span class=\"type\">String</span>,</div><div class=\"line\">  ...</div><div class=\"line\"></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义用户</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  name: <span class=\"type\">String</span>,</div><div class=\"line\">  sex: <span class=\"type\">String</span>,</div><div class=\"line\">  phone: <span class=\"type\">String</span>,</div><div class=\"line\">  ...</div><div class=\"line\"></span>)</span></div></pre></td></tr></table></figure>\n<p>定义好基本的结构之后，我们要去描述用户参加「抽奖活动」这一行为的「结果」，一般情况下， 我们会构造出如下结构：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserActivity</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  userId: <span class=\"type\">Long</span>,</div><div class=\"line\">  activityId: <span class=\"type\">Long</span>,</div><div class=\"line\">  status: <span class=\"type\">Int</span>,                 </div><div class=\"line\">  prizeType: <span class=\"type\">Option</span>[<span class=\"type\">Long</span>],   //奖品的类型，判断是几等奖</div><div class=\"line\">  prize: <span class=\"type\">Option</span>[<span class=\"type\">Long</span>]        //奖品id</div><div class=\"line\"></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">UserActivity</span> </span>&#123;</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Status</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> <span class=\"type\">HasPrize</span> = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> <span class=\"type\">NoPrize</span> = <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> <span class=\"type\">ActivityExpired</span> = <span class=\"number\">0</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在我们就利用这些结构来完成一些基本的需求，假设我们要根据用户参与「抽奖活动」的「结果」来渲染页面：</p>\n<p>分析：用户参与抽奖的结果有大概如下几种：</p>\n<ol>\n<li><p>成功参与活动，并且中奖</p>\n</li>\n<li><p>成功参与活动，没有中奖</p>\n</li>\n<li><p>活动已经过期，用户不能参与活动</p>\n</li>\n</ol>\n<p>那我们可能会这样去组织我们的逻辑：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span></span>(ua: <span class=\"type\">UserActivity</span>) = ua.status <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UserActivity</span>.<span class=\"type\">Status</span>.<span class=\"type\">HasPrize</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UserActivity</span>.<span class=\"type\">Status</span>.<span class=\"type\">NoPrize</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UserActivity</span>.<span class=\"type\">Status</span>.<span class=\"type\">ActivityExpired</span> =&gt; ???</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们根据抽奖结果「状态」的不同而去渲染不同的页面，这样似乎能解决问题，但是，如果我们想要在「模式匹配」完成之后根据用户信息，奖品信息以及活动信息来渲染页面的话，就需要：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span></span>(ua: <span class=\"type\">UserActivity</span>) = ua.status <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UserActivity</span>.<span class=\"type\">Status</span>.<span class=\"type\">HasPrize</span> =&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">//假设用户中奖了，我们需要显示用户的信息，活动信息以及奖品信息,则：</span></div><div class=\"line\">    getUser(ua.userId)          <span class=\"comment\">//获取用户信息</span></div><div class=\"line\">    getActivity(ua.activityId)  <span class=\"comment\">//获取活动信息</span></div><div class=\"line\">    getPrize(ua.prize)          <span class=\"comment\">//获取奖品信息</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UserActivity</span>.<span class=\"type\">Status</span>.<span class=\"type\">NoPrize</span> =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UserActivity</span>.<span class=\"type\">Status</span>.<span class=\"type\">ActivityExpired</span> =&gt; ???</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们在每一次模式匹配完成之后都要去做一大堆获取信息的工作，如果后期需要的信息量很多，那么这里的代码将显得十分臃肿。</p>\n<h5 id=\"利用-ADT-重新组织：-1\"><a href=\"#利用-ADT-重新组织：-1\" class=\"headerlink\" title=\"利用 ADT 重新组织：\"></a>利用 <code>ADT</code> 重新组织：</h5><p>通过上面分析，我们知道，用户参与活动的过程中会涉及到许多信息，那我们就利用 <code>ADT</code> 将这些信息全部构造在一起：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserActivity</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  user: <span class=\"type\">User</span>,</div><div class=\"line\">  activity: <span class=\"type\">Activity</span>,</div><div class=\"line\">  prize: <span class=\"type\">Option</span>[<span class=\"type\">Prize</span>],</div><div class=\"line\">  status: <span class=\"type\">Int</span></div><div class=\"line\"></span>)</span></div></pre></td></tr></table></figure>\n<p>通过这样组织，我们的信息就非常完备了，在之前的「模式匹配」中，我们可以直接去用这些数据，而不用再次去获取。但是上面的结构还存在一些不足：</p>\n<ol>\n<li><p>我们利用模式匹配的时候还是要根据活动的「状态」去匹配，参考「场景一」</p>\n</li>\n<li><p>如果后续业务变得复杂 <code>UserActivity</code> 中的字段可能会很多</p>\n</li>\n</ol>\n<p>所以我们能否再将数据进一步抽象？</p>\n<p>分析：用户参加活动的结果无非就是我们上面列举的几个状态，那我们就将这些状态利用 <code>ADT</code> 再重新组织一下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Status</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> id: <span class=\"type\">Long</span>,</div><div class=\"line\">  <span class=\"keyword\">val</span> detail: <span class=\"type\">StatusDetail</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> calss <span class=\"type\">StatusDetail</span> &#123;</div><div class=\"line\">  user: <span class=\"type\">User</span>,</div><div class=\"line\">  activity: <span class=\"type\">Activity</span></div><div class=\"line\">  prize: <span class=\"type\">Option</span>[<span class=\"type\">Prize</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HasPrize</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  detail: <span class=\"type\">StatusDetail</span></div><div class=\"line\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Status</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoPrize</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  detail: <span class=\"type\">StatusDetail</span></div><div class=\"line\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Status</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityExpired</span> (<span class=\"params\"></div><div class=\"line\">  id: <span class=\"type\">Long</span>,</div><div class=\"line\">  detail: <span class=\"type\">StatusDetail</span></div><div class=\"line\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Status</span></span></div></pre></td></tr></table></figure>\n<p>通过上面的改造，用户参与活动的状态变得更加清晰，同时对外暴露的结构也变得更加简洁，在使用「模式匹配」的时候，我们就可以：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span></span>(status: <span class=\"type\">Status</span>) = status <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">HasPrize</span>(id, detail) =&gt; ???        <span class=\"comment\">//可以直接使用status</span></div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">NoPrize</span>(id, detail) =&gt; ???</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">ActivityExpired</span>(id, detail) =&gt; ???</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过本例，我们可以发现，通过 <code>ADT</code> 可以将数据<code>高度抽像</code>，使得数据的「具体信息」变得简洁，同时「概括能力」变得更强，数据更加「完备」。</p>\n<h2 id=\"延伸阅读\"><a href=\"#延伸阅读\" class=\"headerlink\" title=\"延伸阅读\"></a>延伸阅读</h2><p><a href=\"https://wiki.haskell.org/Algebraic_data_type\">Algebraic data type</a></p>\n<p><a href=\"http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/\">The Algebra of Algebraic Data Types, Part 1</a></p>\n<p><a href=\"http://chris-taylor.github.io/blog/2013/02/11/the-algebra-of-algebraic-data-types-part-ii/\">The Algebra of Algebraic Data Types, Part 2</a></p>\n<p><a href=\"http://chris-taylor.github.io/blog/2013/02/13/the-algebra-of-algebraic-data-types-part-iii/\">The Algebra of Algebraic Data Types, Part 3</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}